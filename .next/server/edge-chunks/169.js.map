{"version":3,"file":"edge-chunks/169.js","mappings":"8FQwJA,EO3IA,EAMA,EfnBA,sBACA,WACA,kDACA,eACA,iEACA,4CACA,2FACA,kDACA,CACA,oBACA,eACA,iEACA,4CACA,4FACA,oDACA,oBCXO,iBACP,WAAY,GAAS,WACrB,iBAEA,OADA,uBACA,eAEA,wBACA,0DACA,8FACA,ECZO,cACP,0BACA,UAEA,oCAEA,2EACA,CACO,UACP,sBACA,SACA,iCACA,IACA,yDAEA,+BAAmE,eAAmB,EAAI,EAQ1F,OAPA,SACA,kBAEA,mBACA,kBACA,QACA,gBACA,CACA,CACA,CACA,OACA,IACA,+BACA,CACA,OACA,CACA,eACA,CChCO,OAAM,UAAW,MACxB,CADwB,MAEjB,UAAuB,EAC9B,qBACA,SAAiB,qBAA6C,GAC9D,cACA,eACA,sCACA,aAEA,UADA,GACA,KACA,WAFA,GAEA,MACA,UAHA,GAGA,IACA,CACA,0BACA,iBACA,2BACA,UACA,0BACA,oBACA,SACA,KACA,GAAsB,GAAQ,EAAE,EAAI,EAEpC,EACA,GAAsB,GAAQ,uBAE9B,GAGA,0BACA,CACA,yBACA,UACA,sBAA4C,QAAgB,EAAW,GAAiB,EAExF,sBACA,QACA,eAEA,QACA,eAEA,QACA,eAEA,QACA,eAEA,QACA,eAEA,QACA,eAEA,QACA,eAEA,OACA,eAEA,cACA,CACA,CACO,kBACP,qBAAkB,GAAU,EAAI,EAChC,qDACA,CACA,CACO,kBACP,qBAAkB,UAAgB,EAClC,mDAGA,GACA,cACA,CACA,CACO,kBACP,qBAAkB,GAAU,EAAI,EAChC,OAAgB,gCAA0C,CAC1D,CACA,CACO,kBACP,CACO,kBACP,CACO,kBACP,CACO,kBACP,CACO,kBACP,CACO,kBACP,CACO,kBACP,CACO,kBACP,CACO,gBAAsC,EAC7C,cACA,CAFwD,IAExD,oEACA,CACA,CACO,gBAA6C,EACpD,cACA,CAF+D,IAE/D,sFACA,CACA,CC3GA,6BACO,KACP,UAqBO,cACP,qDACA,CAOO,cACP,4CACA,UAAkB,EAAW,GAAI,GAAM,SAAV,SAAU,GAEvC,OACA,UAAkB,EAAW,GAAI,GAAM,SAAV,iBAAU,GAEvC,QACA,EAwCO,MACP,IACA,oBACA,CACA,SACA,MACA,CACA,ECzFO,qCCCP,GACA,MACA,UACA,SACA,SACA,SACA,EACO,YACP,MAGA,GFWA,CEXQ,MAAM,SFWd,qBEXc,KACd,SAEA,aAA8B,GAAY,aAAa,kBAA2B,oBAAoB,+BAA0C,GAEhJ,EACA,cACA,wBACA,cACA,EAIA,YAEA,CACA,OACA,QACA,OACA,OACA,OACA,EACA,cACO,cACP,eACA,oBACA,MACA,SAEA,eACA,eACA,YAEA,OACA,qBACA,mBACA,mBACA,oBACA,EAEA,OADA,eACA,CACA,CACO,UACP,YACA,WAA4B,cAC5B,0BAA2C,EAE3C,SACA,oHACA,EACA,mCACA,4BACA,+BACA,MACA,EACA,IAEA,4BACA,uBACA,kCAEA,8BAEA,GC5EO,UCEA,CDFyB,CCEzB,IAGP,4BAEA,0BAEA,8BAiBA,MAEA,QAbA,4CACA,OAGA,MAFA,EAYA,CACA,wBACA,8BAA2C,EAC3C,KADkD,YAClD,iBACA,sCACA,6BACA,sGACA,EAGA,CACA,wBACA,8BAA2C,EAC3C,KADkD,YAClD,UACA,4BAAyC,YACzC,EADoD,CAAC,mBACrD,OACA,0DA6DA,KAKA,UACA,MACA,wBACA,MACA,UACA,MACA,2BACA,QACA,EACA,SAAwB,EAAK,EAC7B,UAEA,KAWA,CALA,mBAKA,gBACA,MACA,cACA,UACA,aACA,QACA,YACA,UACA,cACA,UACA,cACA,UACA,YACA,QACA,EACA,SAAwB,EAAS,EACjC,UAGO,MACP,WCnJO,iBACP,gCACA,cAGA,0DAAsE,6EAEtE,kBACA,CACO,cACP,+EACA,UACA,SAAmB,CACnB,cACA,SAAoB,WAAc,eAClC,EACA,UAGA,YAEA,CAAS,CACT,eACA,kBACA,CAAS,CACJ,CACL,CAOO,cACP,2BACA,SACA,oBACA,OACA,aACA,IACA,qBAGA,OAFA,SACA,gBACA,CAD0C,CAG1C,SAEA,MADA,gBACA,CADsC,CAGtC,CAAS,CACT,eACA,iBAGA,OAFA,gBACA,QACA,CAAqB,qBACrB,CAAS,CACT,yBACA,YACS,CAET,CAKO,oBACP,gCACA,OACA,uCACA,2CAGA,oBACA,aACA,gBACA,OACA,CClFO,gBAA2B,SAAe,GACjD,EACA,aACA,iCACA,CAAS,CACT,sBACA,GCPO,YACA,GACP,yCACA,oBACA,ECFA,GADA,gCACA,eACA,SACA,SACA,YAAoB,MAAS,IAC7B,yDAEA,SACA,CAAC,GAqMM,iBACP,SACA,SACA,YAAwB,WAAgB,KACxC,gBAEA,QACA,CACA,WACA,CCrNA,IAAM,GAAG,gCACT,IACA,YACA,eAEA,cACA,eACA,oBAEA,UACA,SAEA,EACM,GAAQ,cACd,CADc,EACd,qBACA,iBACA,WAAoB,GAAQ,SAC5B,EACA,IAF4B,IAE5B,sBACA,IACA,kBACA,aACA,oBACA,sBACA,gBACA,mBACA,cACA,UACA,mBACA,QDkFO,cAGP,gBACA,SAEA,QAOA,GANA,mBACA,oCAEA,oBACA,cAEA,iBACA,qCAAkD,EAAE,gBACpD,4CACA,CAAS,EAET,SACA,YAAoB,WAAmB,GApBvC,KAoBuC,CACvC,gBArBA,KAqBA,YArBA,MAqBA,EACA,KACA,YAAwB,WAAoB,KAC5C,sBACA,WACA,QACA,QACA,SACA,cACA,cACA,eACA,eAAmC,QAAP,CAAO,QACnC,CACA,wBACA,QACA,CACA,UACA,kBACA,QACA,CACA,WACA,sCACA,QACA,CACA,sBACA,YACA,2CACA,QACA,CACA,KACA,4CACA,YACA,cACA,iBACA,gBACA,aAEA,aACA,CACA,QACA,EC7IA,oBACA,OAAY,EACZ,UAAe,CAAU,CADC,EACc,CAExC,WAFwC,cAGxC,GACA,WAEA,aACA,qBACA,EAQA,MEpCO,SAAS,GAAU,GAC1B,MACA,IAF0B,EAE1B,IACA,qDACA,CAEO,eACP,MACA,UACA,qDACA,CCfO,SACP,cACA,oBACA,oBACQ,EAAsB,4BACtB,EAAsB,iBAC9B,CACA,EAF8B,KAE9B,OASA,EARA,WACA,SAEA,iDACA,mBAA0C,GAAU,GACpD,EACQ,EAAsB,MAFsB,EDrB7C,WCuB8D,CDtBrE,QACA,eACA,YAEA,wBACA,IACA,eACA,WACA,YAEA,QACA,ECWqE,CAAE,EAAsB,sBAC7F,SAEA,uBA0CA,KAGA,eAAkC,WAAmB,KACrD,aACA,OAAqB,mCAErB,GALA,KAKA,CAL2B,CAK3B,GACA,OAAqB,kCAErB,CACA,WACA,EAtDgD,EAAsB,aAAkC,EAAsB,KAAxD,GAAwD,SAC9H,GAD8H,EAC9H,UAA+D,MAAtB,EAAsB,cAE/C,EAAsB,qBACtC,QACA,CAEA,GAAgB,QAAsB,cACtC,WAAwC,EAAsB,6BAC9D,OAA2B,GAAW,EAAsB,KAAvB,GAAuB,gBAA6C,EAAsB,kBAC/G,EAD+G,IACzF,IAA4B,EAAsB,UAAlD,GAAkD,SAA0C,EAAsB,mBACxI,CADwI,CAClH,kBACtC,EADsC,MAEtC,CACA,MAAmD,OAAtB,EAAsB,uCACnD,EAAyB,GAAW,EAAsB,KAAvB,GAAuB,oBAC1D,UACY,EAAsB,QAA4B,EAAsB,UAAlD,GAAkD,uBACxE,EAAsB,iBAClC,CACA,EAFkC,KAElC,CACA,CACA,eACa,EAAsB,oBAGnC,kBAFA,GAIA,CACA,8BAEA,sCACA,gCCnDO,UACP,iBACA,gBACA,iBACA,CACA,4BACA,SACA,mBACA,KACA,UAA0B,EAAW,4EAErC,KACA,SACA,IACA,2BACA,OAEA,gCACA,KACA,QACA,CACA,mBACA,iCACA,mCACA,MACA,IACA,oBACA,CACA,SAGA,MAFA,2DACA,mCACA,CACA,CACA,cACA,UAAsC,EAAQ,gCAE9C,QACA,KACA,CACA,MACA,IACA,oBACA,CACA,SAGA,MAFA,2DACA,mCACA,CACA,CAEA,oBACA,UAAsC,EAAQ,gCAE9C,OAAgC,qBAChC,EAEA,IACA,CACA,SAEA,GAAoB,EAAY,GAChC,MACA,CAFgC,MAEhC,CACA,QACA,CAEA,GACA,SACA,CACA,CACA,kBACA,CAKA,+BACA,SACA,mBACA,UAAoC,GAEpC,QAF+C,EAE/C,SADyB,EAA6B,GAEtD,wBAFsD,CAGtD,QAGA,uBACA,OAEA,CA4BA,cA3BA,kBACA,KACA,UAA0B,EAAW,4EAErC,KACA,SACA,IACA,wBACA,GAEA,GACA,sBAEA,IACA,CACA,SAEA,GAAoB,EAAY,GAChC,MACA,CAFgC,MAEhC,CACA,QACA,CAEA,GACA,SACA,CACA,EACA,EACA,CACA,yBACA,sBACA,CAKA,MACA,SACA,KACA,kBACA,KACA,EACA,UACA,iBACA,eACA,UACA,SACA,CACA,gBACA,CAAiB,CACjB,EAEA,OACA,iCACA,iCACA,CAOA,mBACA,IACA,EADA,OAEA,OAAe,EAAkB,CACjC,cACA,CAFiC,CAEjC,yBACA,CAAa,CACb,cACA,IACA,UAA4B,UAAc,eAC1C,KACA,iBACA,MAAkC,GAAU,wBAC5C,YACA,CACA,SACA,UACA,CACA,CAAa,CACb,eACA,kBACA,CAAa,CACJ,CACT,CACA,CACO,uBACP,YAEA,GADA,UACA,+BACA,6CACA,UAAsB,EAAW,iKAEjC,WAAkB,EAAW,oDAC7B,CACA,aACA,MAA4B,GAE5B,QAFuC,EAEvC,YADiB,EAA6B,SAE9C,kBAF8C,GAE9C,KACA,iBACA,IACA,SACA,CAEA,wBACA,iBACA,IACA,SACA,CACA,CAKA,qBACA,qBACA,0BAWA,EAVA,WACA,SAEA,iDACA,mBAA0C,GAAU,GACpD,EACA,QAFoD,SAEpD,mBAKA,IAJA,SACA,kBACA,IAEqD,KAArD,GAA+B,SDjJxB,GAMP,YAAoB,aAAuB,KAC3C,GAHA,KAGA,YAH0B,CAG1B,MAFA,KAMA,kBAFA,WAMA,GAVA,KAUA,CAV2B,CAU3B,IACA,aACA,cAZA,KAaA,QAdA,KAeA,OAEA,UAEA,CACA,SACA,ECwHqD,KACrD,mBACA,YAEA,CACA,YACA,SAEA,CACA,SACA,cACA,gBACA,aACA,cACA,CACA,UAIA,GAHA,kBACA,8BAEA,IAEA,kCACA,YACA,OACA,iBACA,0BACA,iBAKA,OAHA,gBACA,aACA,eACA,CACA,CAEA,GADA,oBACA,kBACA,YAEA,oBAaA,KACA,gBAdA,YAeA,OACA,6CAEA,WAlBA,OAUA,OATA,mBACA,mBAEA,YACA,aAEA,YACA,kBAEA,IACA,CACA,CChRO,uBACP,aAAY,oDAAyD,EACrE,mBACA,0BAIA,CAHY,EAAS,qDAGrB,yBACA,wDAEmB,GAAM,gCAGzB,kBACA,YAEA,8BACA,SAEA,oCACA,aAA+C,qBAC/C,sDAGA,GADA,eACA,GAEA,cAEA,EAAK,GAQL,OAPI,EAAS,aAAmB,EAAa,mBAAoB,EAAoB,CACrF,iBADqF,GACrF,EACA,UACA,gBACA,OACA,uBACA,CAAK,GACL,CACA,CACO,uBACP,yCACA,EAEA,uCACA,oCACA,aACA,CAAK,CACL,CCzCO,yBACP,kBAAyD,EAAoB,EAC7E,UAIA,OACA,CAAS,EACT,uBACA,qBACA,oBACQ,EAAsB,cAC9B,CACA,KAF8B,OAE9B,GACA,cAA8B,EAAsB,8CAAgF,GAAY,+CAChJ,CAYA,aACA,+CACA,CAaA,qBACA,6DACA,YAAiB,sDACjB,CACA,QAIA,OAHA,oBACA,oEAAwF,EAAsB,kBAE9G,EAF8G,EAE9G,eAEA,UACA,6BACA,CACA,SACA,4BACA,CACA,WACA,8BACA,CACA,CACA,cC/DO,UACP,qBACA,oBACQ,EAAsB,eAC9B,KAD8B,OAC9B,GACA,gBACA,WACA,CACA,oBAEA,EADA,yBACA,QAEA,mCACA,CACA,oBACA,oCACA,MACA,UAAsB,EAAW,wBAAyB,iEAE1D,aAAqB,EAAsB,+CAC3C,CACA,mBACA,WAEA,IADA,QACA,iBACA,wBACA,OAEA,CACA,iDACA,oCACA,mCACA,OAGA,CACA,CAUO,iBAA0B,GACjC,OAD2C,KAC3C,OACA,+CAA+F,GAAoB,gBACnH,CADmH,OASnH,yBAEA,kBADA,aAEA,OAEA,CACA,CAIO,oBACP,qBACA,eACA,qBACA,qBAEA,oBACA,qBAEA,yBACA,WACA,CACA,CACO,oBACP,qBACA,eACA,qBACA,4BACA,CACA,oBACA,qBAEA,oBACA,oBAGA,mBACA,CACA,6BhB9FO,EgB+FP,+BACA,2BACA,EAGA,CACA,gBACA,OhBnGA,GAFA,iBADO,EgBuGoB,oBhBrG3B,GAEA,KgBmGA,CACA,EADmB,IACnB,CACA,CAAa,EAFc,IAI3B,CACA,CCnHO,YACP,6BACA,YAAgB,GAAU,UAE1B,sFACA,CAFA,4EAGA,6FACA,IACA,CACA,EAKO,mBAEP,OADA,KACA,+BACA,CACO,eACP,2BACA,UACA,qCACA,iCACA,gDACA,qCACA,IACA,eACA,aACA,CACO,kFAUA,eACP,EAAa,+BAEb,eA+BO,gBACP,UAzBA,YACA,qCACA,YACA,KACA,SACA,iBACA,IACA,qBACA,WACA,gCACA,eACA,wCACA,SAEA,QACA,CACA,MAEA,QACA,CACA,EAAK,GAEL,OADA,YACA,CACA,EAEA,GACA,qHAEA,mBAEA,OADA,sCAA+C,2BAC/C,CACA,EAGA,oCACA,0BACA,UACA,sCACA,OACA,SACA,SACA,oBACA,kBACA,yBACA,gBACA,YACA,QACA,CAEA,QACA,EACA,kBACA,eAEA,WACA,sCAAkD,EAAI,GAAG,2DAGzD,+DACA,2BAEA,yBACA,4CAEA,SACA,kCAAsD,EAAkB,yBAExE,SACA,yBAEA,oBACA,iDAEA,sBACA,yDAA4F,EAAI,GAAG,EAAK,aAGxG,wHAAoI,GAAO,UAE3I,EC5HA,eACA,oBACA,yBACA,yBACA,2BACA,4BACA,iCAIA,eACA,oBACA,yBACA,iCACA,MACA,eACA,oBACA,wBACA,0BAUO,yBAKP,GAJI,KAIJ,GAFA,QAFoB,UAKpB,kBACA,EAEe,GAAQ,gCAEvB,UACA,qBAEA,OADA,oDACe,GAAQ,gBACvB,CACA,kBAEA,GADA,MAAoB,GAAO,KAC3B,SACA,uDACA,qBACA,IAAwB,aAExB,CACA,OAAW,GAAQ,MACnB,CACA,qBACA,SACA,uBACA,uBACA,yBACA,eAEA,SACA,uDAEA,GAAa,GAAe,GAE5B,SAF4B,CAE5B,WACA,2BAGA,CACA,CAJoD,GAIpD,sBACA,sCAAiD,SAAa,EAAE,KAAiB,eAAe,EAAY,KAAO,EAAE,SAIrH,GACA,gCACA,SACA,oCACA,SAAc,UAAU,aAAqB,EAAE,eAAe,IARuD,GAAqB,EAC1I,CACA,QACA,CE/EO,SACP,eACA,cACA,CACA,CCIO,eACP,4CAAkD,2BAClD,CAwCO,OAvCA,8BAgBP,EAdA,gBACA,YACA,SACA,qBACA,gBACA,OAEA,EACA,EACA,0DACK,IACL,uBACA,KACA,uBAAuD,IAAI,YAG3D,2BACA,QACA,cACA,mBACS,EAET,eACA,QACA,mBACA,4BACA,uBAEA,OADA,mBACA,KACA,CAAS,IACT,WAAkB,EAAW;AAAA,EAA2D,KAAK;AAAA,EAAI,EAAU,EAC3G,CACA,SACA,EAIO,GC/CA,kBAAuB,GAe9B,QAfyC,CAezC,EAAiC,IACjC,+BAAuC,EAAI,qBAAsB,EAAa,WAAa,GAAU,SAAK,KAAmB,CAC7H,CACA,CGtBO,UACP,sBAEO,MACP,gBCDO,UACP,cACA,aACA,oCACA,oBACA,kBAAgE,EAChE,kBAA+D,EAC/D,oBACA,kBAA0D,EAC1D,kBAAyD,EACzD,cAA2C,EAC3C,gBACA,gBACA,gBACA,gBACQ,EAAsB,4BAClB,EAAsB,eACtB,EAAsB,GADA,CACA,UAClC,CAAS,KADyB,EAE1B,EAAsB,4BAClB,EAAsB,eACtB,EAAsB,GADA,CACA,UAClC,CAAS,KADyB,EAM1B,EAAsB,yBAA0D,EAChF,EAAsB,yBAAoD,CAClF,CACA,QAGA,gBACA,cACA,kBACA,iBACA,CAAa,CAAE,EAAsB,2BACrC,CAAS,GACT,CACA,aACA,aAEQ,EAAsB,wBAC9B,sBACA,CACA,YACA,OAAe,EAAsB,YACrC,CACA,OAFqC,MAErC,CACA,OAAe,EAAsB,YACrC,CACA,OAFqC,MAErC,CACA,OAAe,EAAsB,YACrC,CACA,OAFqC,CAGrC,uBACA,CAQA,QAGA,MAF0B,GAAsB,kBAA+C,CAA/C,CAAqE,qBACrH,eAAyB,EAAU,EACnC,KASA,SACA,MAA0B,EAAsB,gBAChD,IADgD,EAEhD,YACA,qCAGA,OAFA,MACA,cACA,KAOA,UAGA,MADA,CAD0B,EAAsB,iBAA+C,GAAsB,qBACrH,eAAyB,UAAsB,EAC/C,KAaA,WACA,2BACY,EAAsB,gBAClC,IADkC,MAClC,GACA,qBACA,cACA,CAAS,CACT,CACA,aACQ,EAAsB,gBAC9B,IAD8B,EAChB,EAAsB,YACpC,CACA,OAFoC,CAEpC,MAEA,GAAY,EAAsB,aAClC,MAEA,aACY,EAAsB,gBACtB,EAAsB,EADA,EACA,qBAElC,MAA0B,EAAsB,gBAKhD,GAJA,CADgD,GAEpC,EAAsB,qCAClC,qBAAiC,EAAU,aAE3C,aACA,WACiB,EAAsB,yBACvC,kBAEY,EAAsB,0BACtB,EAAsB,0BAClC,kBACA,MACA,CACA,gBAEA,UACA,CAAiB,EAAsB,yBAOvC,kBAEY,EAAsB,0BACtB,EAAsB,0BAClC,iBACA,CACA,CACA,cACA,CCvIO,eACP,mDACA,CAmBO,eACP,wCACA,CAqBO,iBACP,4BAwBA,IAvBA,8BACA,UAAsB,EAEtB,qBAF6C,CAE7C,gBACA,UAAsB,EAEtB,OACA,KACA,SACA,OALoD,KAKpD,CACA,wBACA,CACA,yCAwBA,cACA,2DACA,OACA,KACA,UACA,cACA,yDACA,oDACA,IACA,CAAS,CAET,GAnCA,aACA,EACA,OACA,8CAQA,EAPA,EAOA,EAPA,kBAQA,wCACA,KAEA,wCACA,gCACA,kBACA,aAEA,cAEA,MAjBA,IACA,CAAa,CAEb,CAAK,EACL,OAAa,eACb,CAiCO,qBACP,yBAGA,0EACA,CD8BA,mMAKA,GAJI,EAAsB,gBAC1B,IAD0B,SAC1B,8BACA,OAAoB,CAAiB,EAErC,aAAyB,CAFY,CAIrC,OADQ,EAAsB,MADY,EACZ,QAC9B,sBAEA,gBAAyB,EACzB,eADoC,EACpC,YAEA,uBACA,UAAgC,EAAW,WAG3C,IAH2C,GAE3C,UACA,qBACA,CACA,8BAAmC,EAAW,WAC9C,CEhLO,GF+KuC,IE/KvC,WAA2C,GAClD,QAD6D,KAC7D,CACA,oBACA,aACA,yBACA,gBACA,CACA,sBACA,8BACA,+BACA,4BAGA,OAFA,GACA,oBACA,CACA,CACA,oBAIA,GAHA,eACA,iBACA,sBACA,EAEA,IADA,wBACgB,GAAa,cAE7B,oDAEA,GAAqB,GAAkB,iBACvC,0BACA,qBACA,yCAGA,CAEA,CAKA,4BACA,kBACA,4DACA,MACA,UAAsB,EAAW,mDACjC,QACA,CAKA,qBAEA,OADA,kBACe,EAAsB,0BACrC,CAKA,qBAEA,OADA,kBACe,EAAsB,0BACrC,CAKA,8BAEA,OADA,kBACe,EAAsB,0BACrC,CACA,oCAEA,OADA,kBACe,EAAsB,0BACrC,CACA,mBAEA,OADA,kBACe,EAAsB,0BACrC,CACA,qBACA,iCAEA,aACA,4DACA,GACA,oCACA,MAA6B,EAAsB,0BACnD,IACA,6BACA,MAA6B,EAAsB,0BACnD,IACA,6BACA,MAAkC,EAAsB,0BACxD,IACA,sCACA,MAAwC,EAAsB,0BAC9D,UACA,4CACA,wCACA,wBAAqC,EAAsB,2BAE3D,CACA,mCACA,gBACA,IACA,WACA,wBACA,yDAEQ,EAAsB,6BAC9B,uCAAsE,eAA0B,EAAI,mCAA4C,EAEhJ,OADA,kBACA,wBAAuC,GAAmB,KAC1D,CACA,UAF0D,eAE1D,OACA,wBACA,uBAEA,8CACA,CACA,uBACA,aACA,aAAgB,wBAA8C,EAC9D,wCACA,oBAAgB,EA3HhB,EA2HgB,EAAoD,MAEpE,kBACA,GAAgB,GAAkB,IAClC,WADkC,IAClC,CACA,UAA8B,EAAW,yEAEzC,OACA,gBACA,UACA,qBACA,qBACA,uCACA,iCACA,kBACA,SACA,CACA,CACA,CACA,QACA,CAAS,EACT,KACA,eACA,qBACA,0DAGA,kBACA,6BACA,CACA,gBACA,UACA,+CACA,iCACA,mCACA,wBACA,CAAqB,EAErB,GACA,OACA,wBACA,uBAEA,YAAwB,IAAwB,KAChD,0CACA,KACA,cACA,QACA,4BACa,IACb,wBACA,MACA,UAA0B,EAAW,8CAErC,yBACA,MAEA,+BAkBA,EAjBA,uBACA,SACA,WACA,CAAwB,oBAAwB,WAChD,OACA,KAOA,cACA,4BAA0D,kBAAqB,IAAI,mBAAsC,6BACzH,kBAAuC,gCAA6B,EACpE,QACA,MAXA,CACA,4BAA0D,kBAAqB,2BAA2B,eAC1G,0BACA,WAAoC,oBACpC,uBAAuC,2BAA6B,EACpE,QACA,CAOA,IACA,EAA6B,YJ9M7B,eI8MwD,kBACxD,CACA,SACA,6CACA,uBAAuC,2BAA6B,EACpE,QACA,CAEA,+BACA,EAAgC,EAAsB,6BAEtD,GADA,uBAAmC,2BAA6B,EAChE,EACA,MAEA,CACA,CAEA,CACA,CACA,6BACA,OAAW,EAAsB,wCACjC,CAAC,eACD,2BACA,cACA,uBACA,GAAY,GAAkB,GAO9B,MALA,CACA,KACA,wBACA,uBACA,CAGA,CACA,UAAc,EAAW,6EACzB,CAAC,eACD,iCAA2C,KAAQ,KACnD,uBACA,GAAY,GAAkB,0BAC9B,oCAEA,CAEA,CAAC,eACD,iCAA2C,KAAQ,KACnD,uBACA,GAAY,GAAa,IACzB,MADyB,EACzB,SACA,4BACA,4CACA,mEACA,iBAIA,CAAC,eACD,OACA,oBACA,gBACA,cACA,EACA,cAAiB,GAAQ,wBACzB,IACA,yCACA,iCACA,gCAGA,QACA,CAAC,gBACD,oBACA,UAAkB,EAAW,+HAE7B,CAAC,gBACD,2BACA,uBACA,iBACA,CC3RO,kBAAmC,GAC1C,uBACA,EAFsE,EAEtE,SACA,GACA,KACA,SAAuB,qDAA8D,EAGrF,OADA,+BACA,CACA,CACA,oBACA,uBACY,GAAkB,mBAC9B,2BAEA,CACA,CETA,IAKA,IACA,IAfA,EAgBA,IAfA,EAgBA,IAfA,EAgBA,IAfA,EAgBA,KAfA,GAgBA,KAfA,GAgBA,IAfA,GAgBA,SAfA,IAgBA,eAfA,IAoBA,IAfA,GAgBA,CAEA,wBACA,CACA,uBACA,CAkBA,eACA,eACA,IACA,MACA,gBAAiC,GAAK,cAAc,EAAM,EAC1D,EACA,MACA,gBAAmC,GAAK,cAAc,EAAM,EAC5D,EACA,MAIA,CAHA,IACA,MACA,6BACA,YACA,IACA,EAAoC,IAApC,KACA,IACA,WACA,IACA,6BACA,qDACA,KACA,MAEA,6BACA,qDACA,KACA,IAEA,8BACA,sDACA,KACA,IAEA,iCACA,6DACA,KACA,KAEA,kCACA,qBACA,OACA,OACA,wCACA,KACA,MAEA,4BACA,mDACA,KACA,KAEA,IAEA,OACA,QACA,KAEA,IADA,IACA,qCACA,kBACA,IAEA,oBACA,IACA,+CACA,CACA,SACA,YACA,MAEA,YACA,IACA,iDACA,CACA,SAEA,yDACA,CAEA,gCACA,EACA,OACA,IACA,IACA,CAFiB,GAEjB,KACA,IACA,OAA2C,IAA3C,MAA2C,CAE3C,GADA,IACA,eACA,SACA,UACA,IACA,IACA,IACA,CAFyB,GAEzB,MACA,2BAAsD,kDAA6D,CACnH,CACA,SACA,YACA,QAEA,QACA,CACA,IACA,YACA,GACA,CACA,CACA,IAH6B,EAG7B,GACA,YACA,SAEA,cAA4C,oBAC5C,CAEA,OADA,IACA,CACA,EACA,EAHiB,KAIjB,IACA,KADiB,CACjB,GACA,IACA,iBACA,YACA,IACA,YACA,GAGA,CACA,KAJ6B,CAI7B,GACA,YACA,SAEA,iCACA,CAEA,OADA,IACA,CACA,EACA,EAHiB,KAIjB,UACA,mBACA,0BACA,IACA,oBACA,CACA,SACA,YACA,IACA,uBACA,qDACA,oDACA,CACA,UAEA,YACA,CACA,CACA,QAGA,IAFA,YACA,IACA,WAAyC,kBACzC,GACA,iBACA,iCACA,IACA,mCACA,CACA,SACA,kCACA,0BACA,IACA,oDACA,CACA,SACA,YACA,CACA,CACA,EACA,OACA,mCACA,GAEA,EACA,UACA,EAEA,OAnMA,qBACA,sBACA,sCAAkD,SAAkB,GAEpE,aACA,eAA2B,GAAY,WAEvC,sBACA,EA2LA,gBCvOO,kBAAmC,GAC1C,eACA,QACA,EAHsE,CAGtE,UACA,oBACA,oBACA,oBACQ,EAAsB,eACtB,EAAsB,GADA,CACA,WAC9B,CACA,oCACA,OAAe,EAAsB,YACrC,CAQA,OATqC,mBASrC,GACA,mBAEA,OADA,qCACA,CACA,CACA,mCACA,gBAEA,OADA,mCAA8D,eAAyB,EAAI,cAAuB,oDAA8D,GAChL,CACA,CACA,mCACA,4BACA,gBACA,IACA,WACA,wBACA,yDAEQ,EAAsB,2BAC9B,uCAA8D,eAAyB,EAAI,mCAA4C,EAEvI,mBADA,kBACA,GACY,EAAsB,6BAElC,gCACA,UAAsB,EAEtB,eAFuC,eAEvC,CAAuC,EAAsB,2BAC7D,CACA,+BACA,IASA,EATA,YACA,IACA,WACA,wBACA,yDAEQ,EAAsB,2BAC9B,kBACA,MAAuB,GAAM,sCAE7B,qBACA,aAEA,wBAAwC,EAAsB,4BAElD,EAAsB,6BAClC,OAEA,gCACA,UAAsB,EAEtB,eAFuC,eAEvC,CAAuC,EAAsB,2BAC7D,CACA,4EACA,YAEQ,EAAsB,mBAC9B,CAAK,gBACL,MAAoB,EAAsB,6BAC1C,IAGA,GACA,gBACA,gBACA,yBACA,yBACA,wBACA,4BACA,EACQ,EAAsB,yBAV9B,CAYA,CAAK,gBACL,cACA,OACA,MAA2B,EAAsB,6BAEjD,aADA,wBACA,YACA,+BACA,iBACA,+BACA,qBACA,wDACA,4BACA,sBACA,2BACA,wBACiB,GAEjB,uBACA,+BACA,oBACA,4BACA,sBACA,2BACiB,EAEjB,0DACA,qCACA,4BACA,iCACiB,EAEjB,0DACA,qCACA,4BACA,iCACiB,EAEjB,MAA0B,EAAsB,6BAOhD,aANA,kBACgB,EAAsB,6BACtC,iCACoB,EAAsB,wDAG1C,wBACA,sCACoB,EAAsB,6BAE1C,iCACwB,EAAsB,wDAG9C,kCAEA,qCACA,sCACA,UAGA,qBACA,kDACA,sBACA,cACA,+BACA,6CACA,yCACA,CAAqB,EAGrB,QAEA,CACA,CACA,CAAK,kBAEL,GADsB,EAAsB,6BAC5C,uBAEA,OAEA,gCACA,MACA,qCAEA,WACA,iDAEA,wBACA,MAA8B,EAAsB,qFACpD,iDACA,qBACA,QACA,+BACA,iBAAkC,GAAkB,qCACpD,oDACA,IACA,CAAa,CACb,MAEA,OAEK,gBACL,MAAsB,EAAsB,6BAC5C,uCACA,kBACA,MAAmC,EAAsB,2BACzD,2BACA,0BACA,4CACA,CAAa,CACb,CACA,qCACA,kBACA,2BAAyC,0BAAyC,GAElF,gDACA,2BACA,oCAAkD,2BAA0C,GAE5F,gDACA,2BACA,oCAAkD,2BAA0C,EAE5F,CAAK,eACL,cACA,UAAsB,EAAW,2CAEjC,MAAyB,EAAsB,aAC/C,MACA,CAF+C,KAE/C,IAAsB,EAAW,4CAIjC,OAFQ,EAAsB,sBACA,gBAC9B,IAD8B,KAqK9B,SLtVO,EKuVP,OAAY,yDAA2D,EA8EvE,OLraO,EKwVP,CACA,KACA,KACA,WA0EmC,EA1EnC,WAAgC,0CAAwD,IACxF,MACA,UAA0B,EAAW,oCAAqC,EAAM,GAEhF,YAAoB,0CAA4D,EAChF,SACA,CADuC,EACvC,GACA,UAA0B,EAAW,UAF6B,KAE7B,YAA4B,EAAM,GAEvE,MACA,IAAwB,oBAAwB,EAChD,WACA,UAA8B,EAAW,8CAA+C,EAAM,GAE9F,MACA,UAA8B,EAAW,yCAA0C,EAAM,GAEzF,OACA,KACA,SACA,UACA,eAAyC,mBAAuB,CAChE,OACA,uBACA,CAAqB,CACrB,gBACA,QACA,UACA,CACA,QACA,EACA,CACA,KACA,QACA,gBACA,WACA,SACA,KACA,OACA,UACA,wBACA,yBACA,IAAoC,6BAAsC,EAC1E,CAAoC,yBAAmC,MACvE,WACA,UAA0C,EAAW,mBAAoB,EAAM,eAAe,EAAE;AAAA,EAAQ,MAAc,GAEtH,WACA,UAA0C,EAAW,mBAAoB,EAAM,eAAe,EAAE;AAAA,EAAU,MAAc,GAExH,WACA,UAA0C,EAAW,mBAAoB,EAAM,eAAe,EAAE;AAAA,EAAmB,MAAc,GAEjI,WACA,UAA0C,EAAW,mBAAoB,EAAM,eAAe,EAAE;AAAA,EAAwB,MAAc,GAEtI,OAAqC,2BAAmC,yBACxE,CAAyB,CACzB,CAAqB,EAGrB,CACA,KACA,SAA2B,8CAAiE,CAC5F,gBACA,QACA,UACA,CACA,CAAS,EACT,UACA,QACA,yBACA,yBAAmC,GAAqB,EAAI,ELla5D,MKoamC,GLnZnC,KKmZmC,GLnanC,CACA,KACA,2BACA,KACA,SACA,aACA,YACA,wBACA,CACA,iCAEA,OACiB,CACjB,CAAa,CACb,CKsZA,EApPA,EAAgD,EAAsB,aACtE,CAAK,MADiE,SAEtE,MAA+B,EAAsB,qCACrD,GAAwC,GACxC,EAEA,IACA,CAAK,eAJmC,CAKxC,YACA,MAAuB,EAAsB,aAC7C,OAD6C,EAC7B,QAAmB,EAUnC,cAAqB,gDAAyD,EAT9E,EAOA,mBANA,EAAuB,EAAsB,SAC7C,KACA,MAF6C,EAE7C,GACa,MAKiE,YAC9E,mBAIA,GAHA,GACA,iBAAqD,kCAAiC,mBAEtF,EACA,cAGA,CACA,YAA4B,kBAA4B,EAExD,4BACA,IACA,uCACA,+BAEA,IACA,uCACA,8BAEA,MAdA,2BAAsD,IAgBtD,OACA,kBACoB,EAAsB,cAA6C,GAAsB,EAAsB,CAAzF,GAAyF,YAAvB,GAC5G,CADmI,UACnI,EACA,UAAkC,EAElC,qBAFyD,CAEzD,EACA,UAAkC,CAElC,CAGA,GADA,mBACA,GACA,GANgE,MAOhE,CAD0B,EAC1B,SAAoB,UAD2B,CAC3B,2CAA6D,EA2BjF,GAzBA,2BACA,GACA,8CAEA,GACA,mBACA,IACA,yBAIA,QACA,sCACA,cACA,wDACA,iDAPA,2BAWA,IACA,4CACA,oBAA+C,EAAsB,4BACrE,kBAA4C,GAAY,qBAGxD,EAGA,cAA6B,+BAAyC,EAFtE,sBACA,0BACsE,IACtE,4CAAiG,CACjG,mBACA,GACA,SACA,GACA,WACA,GACA,0BAAsE,8BAAoC,EAC1G,SACA,yBACA,eACA,kCL/MO,cACP,KK+M+C,CL9M/C,SAEA,2DACA,oCACA,EK0MgD,EAAsB,iBACtE,GADsE,QACtE,kBAAkE,GAAY,uBAG9E,CAEA,CACA,QACA,CAAK,0BACL,SACA,KACA,KA+BA,OA9BA,oBACA,gBACA,EACA,aAGA,SAEA,CAAS,EACT,mBAEA,aADA,KACA,GACA,iBAEA,WACA,CAAS,EACT,oBAEA,aADA,KACA,GACA,WAEA,WACA,CAAS,EACT,oBAEA,aADA,KACA,GACA,WAEA,WACA,CAAS,EACT,CACA,cACA,SAOA,CAAyB,MADzB,UACyB,SANzB,EACA,CAAiC,sBAEjC,mCAA6E,WAAiB,cAA8B,iBAA4B,CAAI,qBAA8B,EAK1L,iBACA,aACA,CAAyB,sBAEzB,CACA,CACA,mBAEA,OADA,IAA2B,GAAM,uDACjC,kBACA,CACA,CAkFA,eACA,wBACA,CC7dO,iBAA4C,GACnD,iBADuE,SACvE,GACA,mBAEA,OADA,qCACA,CACA,CACA,uBACA,aAEA,GACA,GACA,KACA,SAAuB,qDAA8D,EAGrF,OADA,+BACA,CACA,CACA,CCRO,iBAA0B,GACjC,QAD4C,KAC5C,CACA,oBACA,kBAA4B,GAAoB,aAChD,CACA,YACA,mDAAwD,2BAAgD,CACxG,CAWA,cACA,wBAAgC,EAAI,qBAAsB,EAAa,IACvE,CAcA,cACA,yBAAiC,EAAI,qBAAsB,EAAa,GAAK,YAAkB,CAC/F,CAaA,SAAmB,IACnB,mDAA6D,GAAU,SAAK,KAAmB,CAC/F,CAWA,YACA,2BAAmC,EAAI,qBAAsB,EAAa,IAC1E,CACA,WP8DA,eO7D0B,OP6D1B,IACA,uBACA,UAAsB,EAAW,8DAA+D,aAAa,OAAU,KAEvH,0BACA,UAAsB,EAAW,SAAU,MAAV,IAAU,MAAmB,4FAE9D,COnEA,qCACA,UACA,KACA,SACA,cACA,oDACA,CAAa,CACJ,EACT,eAAyC,GAAmB,KAC5D,CACA,UAF4D,CAE5D,UACA,SACmB,GAA6B,2BAEjC,GAAoB,0BACnC,CAIA,YACA,OAAe,GAAoB,sCACnC,CACA,CAKA,YAAuB,ECpGhB,MDoGwB,CCpGxB,WAAmB,GAC1B,QADqC,KACrC,CACA,oBACA,qBAA+B,GAA0B,aACzD,CACA,CACA,eAAmB,GGTnB,QHS8B,MGT9B,gCACA,iBA2CO,OACP,kBACA,UACA,gBACA,cACA,eA/CA,iBAYA,EAXA,MACA,OACA,YACA,WAAgB,WAAgB,EAEhC,aADA,kBACA,GACA,cAEA,MACA,CACA,SAYA,aAVA,qBACA,cAEA,MACA,KAGA,KACA,sBAA2C,GAE3C,IACA,WACA,sBACA,uDACA,2BACA,KACA,eACA,aAIA,QACA,KACA,eAEA,WAEA,CACA,EAMA,IACA,sBACA,WACA,YACA,UAEA,UACA,YACA,WAGA,cACA,YAEA,CACA,CACA,OAAa,yBACb,CChEO,kBAAqB,GAgB5B,YACA,0CACA,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,0BAAI,CAAoC,cACzE,mBACA,CAAS,CACT,CACA,CCxBO,iBAA6B,GACpC,QAD+C,CAC/C,GACA,iDAA0D,GAA2B,CACrF,OACA,KACA,WAHqF,IAGrF,KACA,YAA0B,cAAmB,CACpC,eACT,CACA,CCTO,iBAA2B,GAClC,QAD6C,CAC7C,GACA,+CAAwD,GAA2B,MAAG,mBAAgC,eAAqB,eAC3I,CACA,CCCO,iBAAoB,GAC3B,QADsC,KACtC,CACA,oBACA,wBAAkC,GAAgC,cAClE,sBAAgC,GAA4B,cAC5D,gBAA0B,GAAgB,aAC1C,CACA,CACA,kBAAuB,GACvB,WADqC,IACrC,CAAqB,GACrB,SADiC,CAClB,ECdR,IDcc,GCdd,WAAsB,GAI7B,QAJwC,CAIxC,GACA,0CAA+C,OAAkB,CACjE,CAIA,cACA,wBAAgC,EAAI,YAAa,EAAQ,IACzD,CAIA,SAAmB,IACnB,0CAAoD,GAAU,OAAK,OAAmB,CACtF,CAMA,YACA,yBAAiC,EAAI,YAAa,EAAQ,WAC1D,CACA,CC1BO,iBAAyB,GAWhC,QAX2C,CAW3C,GACA,wCACA,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAWA,cACA,wBAAgC,EAAI,eAAgB,EAAY,GAChE,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAWA,cACA,yBAAiC,EAAI,eAAgB,EAAY,GACjE,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAYA,SAAmB,IACnB,6CAAuD,GAAU,CACjE,MADiE,EAEjE,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAUA,YACA,2BAAmC,EAAI,eAAgB,EAAY,GACnE,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CACA,CCtFO,iBAAuB,GAgB9B,YACA,+CACA,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CACA,CCvBO,iBAAoC,GAgB3C,YACA,6DACA,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CACA,CCpBO,iBAAuB,GAC9B,QADyC,KACzC,CACA,oBACA,kBAA4B,GAAoB,cAChD,+BAAyC,GAA8C,aACvF,CACA,CACA,YAAoB,GACpB,KAD4B,mBAC5B,CAAiC,ECN1B,OAAM,WAAiB,CDMwB,ECAtD,GANqB,IAMrB,CANyC,CAMzC,KACA,yBAAiC,EAAI,YAAa,EAAS,YAC3D,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAMA,gBACA,cAAgB,GAAY,EAC5B,wBAAgC,EAAI,YAAa,EAAU,YAAY,EAAU,GACjF,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAMA,cACA,cAAgB,QAAqB,EACrC,yBAAiC,EAAI,YAAa,EAAU,YAAY,EAAU,GAClF,OACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAMA,WAA6B,IAC7B,+BAAuC,EAAI,YAAa,EAAS,WAAa,GAAU,CACxF,MADwF,EAExF,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAMA,cACA,cAAgB,GAAY,EAC5B,2BAAmC,EAAI,YAAa,EAAU,YAAY,EAAU,GACpF,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CACA,CC9DO,iBAAoB,GAM3B,QANsC,CAMtC,OACA,cAAgB,iBAA8B,EAC9C,wBAAgC,EAAI,YAAa,EAAU,QAAQ,EAAO,SAAS,EAAO,GAC1F,QACA,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CAMA,YACA,cAAgB,QAAsB,EACtC,+BAAuC,EAAI,YAAa,EAAU,QAAQ,EAAM,QAAU,GAAU,CACpG,MADoG,EAEpG,KACA,QAAqB,GAAY,EAAI,OAAJ,OAAI,gBAAgC,aACrE,CAAS,CACT,CACA,KrCnCA,MGCA,GCAA,GUDA,uCEAA,wBIAA,oCqBAA,qE2BAA,wBUCI,GAAE,qBxCoCC,WACP,QAAqB,IAAN,GAAM,CAErB,EAFqB,EAErB,EAAoB,GAAM,iBAC1B,kGACA,CACA,CAEA,cACA,WACA,oBACA,YAAwB,IAAS,IACjC,qBAEA,6CACA,CACA,EC7CO,MACP,4BACA,4CAEA,yBACA,4CEPO,kBAA8B,GACrC,QADgD,KAChD,CACA,oBACA,aAEA,gBAGA,cAAsD,EACtD,cAAsD,EACtD,oBACA,oBACA,oBACA,oBACA,oBACA,oBAEA,oBACA,oBACA,mBACA,CACA,8NACA,SACA,KACA,KAgCA,OA9BA,oBACA,gBACA,EACA,aAGA,SAEA,CAAS,EACT,mBAEA,aADA,KACA,GACA,iBAEA,WACA,CAAS,EACT,oBAEA,aADA,KACA,GACA,WAEA,WACA,CAAS,EACT,oBAEA,aADA,KACA,GACA,WAEA,WACA,CAAS,EACT,CACA,cACA,SAOA,CAAyB,MADzB,UACyB,SANzB,EACA,CAAiC,sBAEjC,mCAA6E,WAAiB,cAA8B,iBAA4B,CAAI,qBAA8B,EAK1L,iBACA,aACA,CAAyB,sBAEzB,CACA,CACA,6BACA,aAEA,OADA,qCACA,CACA,CACA,+BACA,gBACA,IACA,WACA,wBACA,yDAEA,kBACA,MAAuB,GAAM,sCAC7B,qBACY,EAAsB,6BAElC,gCACA,UAAsB,EAEtB,eAFuC,IAEvC,CAA4B,EAAsB,2BAClD,CACA,mBAEA,OADA,IAA2B,GAAM,uDACjC,kBACA,CACA,0CACA,aAKA,OAJA,4CACA,KACA,SAAuB,mDAA4D,CAC1E,GACT,CACA,CACA,0CACA,gBACA,IACA,WACA,wBACA,yDAEA,OAAuB,gBACvB,iCACA,KACA,8BACS,EAET,mBADA,kBACA,GACY,EAAsB,6BAElC,gCACA,UAAsB,EAEtB,eAFuC,IAEvC,CAA4B,EAAsB,2BAClD,CACA,0CACA,aAKA,OAJA,yCACA,KACA,SAAuB,mDAA4D,CAC1E,GACT,CACA,CACA,sCACA,aAKA,OAJA,wCACA,KACA,SAAuB,mDAA4D,CAC1E,GACT,CACA,CACA,eACA,OAAe,EAAsB,YACrC,CACA,OAFqC,KAErC,CACA,OAAe,EAAsB,YACrC,CACA,OAFqC,iBAErC,CACA,OAAe,EAAsB,YACrC,CACA,OAFqC,iBAErC,CACA,OAAe,EAAsB,YACrC,CACA,OAFqC,cAErC,CAEA,OADA,kBACA,cAA6B,EAAsB,aACnD,CACA,MAFmD,eAEnD,CAEA,OADA,kBACA,cAA6B,EAAsB,aACnD,CACA,MAFmD,UAEnD,CAEA,GADA,kBACA,CAAa,EAAsB,aACnC,OADmC,KACnC,+BACA,OAAe,EAAsB,YACrC,CACA,OAFqC,4BAErC,OACA,gBACA,IACA,WACA,wBACA,yDAEA,OAAuB,gBACvB,0BAAyD,mCAA4C,EAErG,mBADA,kBACA,GACY,EAAsB,6BAElC,gCACA,UAAsB,EAEtB,eAFuC,IAEvC,CAA4B,EAAsB,2BAClD,CACA,sCACA,gBACA,IACA,WACA,wBACA,yDAEA,OAAuB,gBACvB,sBAA0D,mCAA4C,EAEtG,mBADA,kBACA,GACY,EAAsB,6BAElC,gCACA,UAAsB,EAEtB,eAFuC,IAEvC,CAA4B,EAAsB,2BAClD,CACA,4BACA,kCACA,yBACA,OACA,QACA,CACA,WACA,YAKA,wBALA,CACA,OACA,QACA,CAOA,0CACA,UAEA,0CACA,UAEA,GAAqB,EAAK,IAAc,EAAK,KAC7C,+BAEA,uCACA,uDACA,aACA,QACA,CACA,CAHkD,GAGlD,YACA,IAAyB,EAAK,SAC9B,6DAA+F,EAAW,GAE1G,cACA,WAEA,MADA,iBACA,gEAEA,sBACA,oFAAgH,EAAM,GAEtH,UACA,SACA,UAGA,8BAEA,CACA,QACA,MAEA,sCAAsD,EAAI,gBAAgB,EAAW,cAAc,EAAS,EAE5G,OACA,CACA,QACA,CACA,WACA,QACA,CACA,oCACA,qDACA,CACA,mCACA,iDACA,CACA,uCACA,qDACA,CACA,CACA,qBACA,eAIA,OAFI,EAAsB,eACtB,EAAsB,GADA,CACA,yBAC1B,SACA,qBAEA,KACA,0BACA,wBACA,6BACA,iCACA,2BACA,4BACA,wBACA,4BACA,2BACA,yBACY,EAAsB,6BAClC,KACA,+BACA,kCACA,4BACA,gCACA,6BACA,gCACA,8BACY,EAAsB,6BAClC,KACA,8BACA,iCACA,2BACA,+BACA,gCACY,EAAsB,6BAClC,KACA,aAEA,kGAGA,CACA,CAAC,eACD,cACA,UAAkB,EAAW,2CAE7B,IAAS,EAAsB,aAC/B,OAD+B,KAC/B,mCACA,OAAW,EAAsB,YACjC,CAAC,OADgC,MAChC,GACD,SAA6C,EAAsB,4BAA8F,EAAsB,cAGvL,MAHuL,EAGvL,KAFI,EAAsB,eACtB,EAAsB,GADA,CACA,iBAC1B,IACA,yBACA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","sources":["webpack://_N_E/./node_modules/openai/internal/tslib.mjs","webpack://_N_E/./node_modules/openai/internal/utils/uuid.mjs","webpack://_N_E/./node_modules/openai/internal/errors.mjs","webpack://_N_E/./node_modules/openai/core/error.mjs","webpack://_N_E/./node_modules/openai/internal/utils/values.mjs","webpack://_N_E/./node_modules/openai/internal/utils/sleep.mjs","webpack://_N_E/./node_modules/openai/internal/utils/log.mjs","webpack://_N_E/./node_modules/openai/version.mjs","webpack://_N_E/./node_modules/openai/internal/detect-platform.mjs","webpack://_N_E/./node_modules/openai/internal/shims.mjs","webpack://_N_E/./node_modules/openai/internal/request-options.mjs","webpack://_N_E/./node_modules/openai/internal/qs/formats.mjs","webpack://_N_E/./node_modules/openai/internal/qs/utils.mjs","webpack://_N_E/./node_modules/openai/internal/qs/stringify.mjs","webpack://_N_E/./node_modules/openai/internal/qs/index.mjs","webpack://_N_E/./node_modules/openai/internal/utils/bytes.mjs","webpack://_N_E/./node_modules/openai/internal/decoders/line.mjs","webpack://_N_E/./node_modules/openai/core/streaming.mjs","webpack://_N_E/./node_modules/openai/internal/parse.mjs","webpack://_N_E/./node_modules/openai/core/api-promise.mjs","webpack://_N_E/./node_modules/openai/core/pagination.mjs","webpack://_N_E/./node_modules/openai/internal/uploads.mjs","webpack://_N_E/./node_modules/openai/internal/to-file.mjs","webpack://_N_E/./node_modules/openai/core/uploads.mjs","webpack://_N_E/./node_modules/openai/core/resource.mjs","webpack://_N_E/./node_modules/openai/internal/utils/path.mjs","webpack://_N_E/./node_modules/openai/resources/chat/completions/messages.mjs","webpack://_N_E/./node_modules/openai/error.mjs","webpack://_N_E/./node_modules/openai/lib/RunnableFunction.mjs","webpack://_N_E/./node_modules/openai/lib/chatCompletionUtils.mjs","webpack://_N_E/./node_modules/openai/lib/EventStream.mjs","webpack://_N_E/./node_modules/openai/lib/parser.mjs","webpack://_N_E/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs","webpack://_N_E/./node_modules/openai/lib/ChatCompletionRunner.mjs","webpack://_N_E/./node_modules/openai/streaming.mjs","webpack://_N_E/./node_modules/openai/_vendor/partial-json-parser/parser.mjs","webpack://_N_E/./node_modules/openai/lib/ChatCompletionStream.mjs","webpack://_N_E/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs","webpack://_N_E/./node_modules/openai/resources/chat/completions/completions.mjs","webpack://_N_E/./node_modules/openai/resources/chat/chat.mjs","webpack://_N_E/./node_modules/openai/resources/chat/completions/index.mjs","webpack://_N_E/./node_modules/openai/resources/chat/index.mjs","webpack://_N_E/./node_modules/openai/internal/headers.mjs","webpack://_N_E/./node_modules/openai/resources/audio/speech.mjs","webpack://_N_E/./node_modules/openai/resources/audio/transcriptions.mjs","webpack://_N_E/./node_modules/openai/resources/audio/translations.mjs","webpack://_N_E/./node_modules/openai/resources/audio/audio.mjs","webpack://_N_E/./node_modules/openai/resources/batches.mjs","webpack://_N_E/./node_modules/openai/resources/beta/assistants.mjs","webpack://_N_E/./node_modules/openai/resources/beta/realtime/sessions.mjs","webpack://_N_E/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs","webpack://_N_E/./node_modules/openai/resources/beta/realtime/realtime.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/messages.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/runs/steps.mjs","webpack://_N_E/./node_modules/openai/internal/utils/base64.mjs","webpack://_N_E/./node_modules/openai/internal/utils/env.mjs","webpack://_N_E/./node_modules/openai/internal/utils.mjs","webpack://_N_E/./node_modules/openai/lib/AssistantStream.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/runs/runs.mjs","webpack://_N_E/./node_modules/openai/resources/beta/threads/threads.mjs","webpack://_N_E/./node_modules/openai/resources/beta/beta.mjs","webpack://_N_E/./node_modules/openai/resources/completions.mjs","webpack://_N_E/./node_modules/openai/resources/containers/files/content.mjs","webpack://_N_E/./node_modules/openai/resources/containers/files/files.mjs","webpack://_N_E/./node_modules/openai/resources/containers/containers.mjs","webpack://_N_E/./node_modules/openai/resources/embeddings.mjs","webpack://_N_E/./node_modules/openai/resources/evals/runs/output-items.mjs","webpack://_N_E/./node_modules/openai/resources/evals/runs/runs.mjs","webpack://_N_E/./node_modules/openai/resources/evals/evals.mjs","webpack://_N_E/./node_modules/openai/resources/files.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/methods.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/alpha/graders.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/alpha/alpha.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs","webpack://_N_E/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs","webpack://_N_E/./node_modules/openai/resources/graders/grader-models.mjs","webpack://_N_E/./node_modules/openai/resources/graders/graders.mjs","webpack://_N_E/./node_modules/openai/resources/images.mjs","webpack://_N_E/./node_modules/openai/resources/models.mjs","webpack://_N_E/./node_modules/openai/resources/moderations.mjs","webpack://_N_E/./node_modules/openai/lib/ResponsesParser.mjs","webpack://_N_E/./node_modules/openai/lib/responses/ResponseStream.mjs","webpack://_N_E/./node_modules/openai/resources/responses/input-items.mjs","webpack://_N_E/./node_modules/openai/resources/responses/responses.mjs","webpack://_N_E/./node_modules/openai/resources/uploads/parts.mjs","webpack://_N_E/./node_modules/openai/resources/uploads/uploads.mjs","webpack://_N_E/./node_modules/openai/lib/Util.mjs","webpack://_N_E/./node_modules/openai/resources/vector-stores/file-batches.mjs","webpack://_N_E/./node_modules/openai/resources/vector-stores/files.mjs","webpack://_N_E/./node_modules/openai/resources/vector-stores/vector-stores.mjs","webpack://_N_E/./node_modules/openai/resources/index.mjs","webpack://_N_E/./node_modules/openai/client.mjs","webpack://_N_E/./node_modules/openai/azure.mjs","webpack://_N_E/./node_modules/openai/index.mjs"],"sourcesContent":["function __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\")\n        throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f)\n        throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n        throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f)\n        throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n        throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nexport { __classPrivateFieldSet, __classPrivateFieldGet };\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * https://stackoverflow.com/a/2117523\n */\nexport let uuid4 = function () {\n    const { crypto } = globalThis;\n    if (crypto?.randomUUID) {\n        uuid4 = crypto.randomUUID.bind(crypto);\n        return crypto.randomUUID();\n    }\n    const u8 = new Uint8Array(1);\n    const randomByte = crypto ? () => crypto.getRandomValues(u8)[0] : () => (Math.random() * 0xff) & 0xff;\n    return '10000000-1000-4000-8000-100000000000'.replace(/[018]/g, (c) => (+c ^ (randomByte() & (15 >> (+c / 4)))).toString(16));\n};\n//# sourceMappingURL=uuid.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport function isAbortError(err) {\n    return (typeof err === 'object' &&\n        err !== null &&\n        // Spec-compliant fetch implementations\n        (('name' in err && err.name === 'AbortError') ||\n            // Expo fetch\n            ('message' in err && String(err.message).includes('FetchRequestCanceledException'))));\n}\nexport const castToError = (err) => {\n    if (err instanceof Error)\n        return err;\n    if (typeof err === 'object' && err !== null) {\n        try {\n            if (Object.prototype.toString.call(err) === '[object Error]') {\n                // @ts-ignore - not all envs have native support for cause yet\n                const error = new Error(err.message, err.cause ? { cause: err.cause } : {});\n                if (err.stack)\n                    error.stack = err.stack;\n                // @ts-ignore - not all envs have native support for cause yet\n                if (err.cause && !error.cause)\n                    error.cause = err.cause;\n                if (err.name)\n                    error.name = err.name;\n                return error;\n            }\n        }\n        catch { }\n        try {\n            return new Error(JSON.stringify(err));\n        }\n        catch { }\n    }\n    return new Error(err);\n};\n//# sourceMappingURL=errors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { castToError } from \"../internal/errors.mjs\";\nexport class OpenAIError extends Error {\n}\nexport class APIError extends OpenAIError {\n    constructor(status, error, message, headers) {\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.requestID = headers?.get('x-request-id');\n        this.error = error;\n        const data = error;\n        this.code = data?.['code'];\n        this.param = data?.['param'];\n        this.type = data?.['type'];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ?\n            typeof error.message === 'string' ?\n                error.message\n                : JSON.stringify(error.message)\n            : error ? JSON.stringify(error)\n                : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return '(no status code or body)';\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({ message, cause: castToError(errorResponse) });\n        }\n        const error = errorResponse?.['error'];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nexport class APIUserAbortError extends APIError {\n    constructor({ message } = {}) {\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\n    }\n}\nexport class APIConnectionError extends APIError {\n    constructor({ message, cause }) {\n        super(undefined, undefined, message || 'Connection error.', undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause)\n            this.cause = cause;\n    }\n}\nexport class APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}) {\n        super({ message: message ?? 'Request timed out.' });\n    }\n}\nexport class BadRequestError extends APIError {\n}\nexport class AuthenticationError extends APIError {\n}\nexport class PermissionDeniedError extends APIError {\n}\nexport class NotFoundError extends APIError {\n}\nexport class ConflictError extends APIError {\n}\nexport class UnprocessableEntityError extends APIError {\n}\nexport class RateLimitError extends APIError {\n}\nexport class InternalServerError extends APIError {\n}\nexport class LengthFinishReasonError extends OpenAIError {\n    constructor() {\n        super(`Could not parse response content as the length limit was reached`);\n    }\n}\nexport class ContentFilterFinishReasonError extends OpenAIError {\n    constructor() {\n        super(`Could not parse response content as the request was rejected by the content filter`);\n    }\n}\n//# sourceMappingURL=error.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { OpenAIError } from \"../../core/error.mjs\";\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nexport const isAbsoluteURL = (url) => {\n    return startsWithSchemeRegexp.test(url);\n};\n/** Returns an object if the given value isn't an object, otherwise returns as-is */\nexport function maybeObj(x) {\n    if (typeof x !== 'object') {\n        return {};\n    }\n    return x ?? {};\n}\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n    if (!obj)\n        return true;\n    for (const _k in obj)\n        return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function isObj(obj) {\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\nexport const ensurePresent = (value) => {\n    if (value == null) {\n        throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    }\n    return value;\n};\nexport const validatePositiveInteger = (name, n) => {\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\n        throw new OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nexport const coerceInteger = (value) => {\n    if (typeof value === 'number')\n        return Math.round(value);\n    if (typeof value === 'string')\n        return parseInt(value, 10);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = (value) => {\n    if (typeof value === 'number')\n        return value;\n    if (typeof value === 'string')\n        return parseFloat(value);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = (value) => {\n    if (typeof value === 'boolean')\n        return value;\n    if (typeof value === 'string')\n        return value === 'true';\n    return Boolean(value);\n};\nexport const maybeCoerceInteger = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nexport const maybeCoerceFloat = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\nexport const safeJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n//# sourceMappingURL=values.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n//# sourceMappingURL=sleep.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { hasOwn } from \"./values.mjs\";\nconst levelNumbers = {\n    off: 0,\n    error: 200,\n    warn: 300,\n    info: 400,\n    debug: 500,\n};\nexport const parseLogLevel = (maybeLevel, sourceName, client) => {\n    if (!maybeLevel) {\n        return undefined;\n    }\n    if (hasOwn(levelNumbers, maybeLevel)) {\n        return maybeLevel;\n    }\n    loggerFor(client).warn(`${sourceName} was set to ${JSON.stringify(maybeLevel)}, expected one of ${JSON.stringify(Object.keys(levelNumbers))}`);\n    return undefined;\n};\nfunction noop() { }\nfunction makeLogFn(fnLevel, logger, logLevel) {\n    if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {\n        return noop;\n    }\n    else {\n        // Don't wrap logger functions, we want the stacktrace intact!\n        return logger[fnLevel].bind(logger);\n    }\n}\nconst noopLogger = {\n    error: noop,\n    warn: noop,\n    info: noop,\n    debug: noop,\n};\nlet cachedLoggers = new WeakMap();\nexport function loggerFor(client) {\n    const logger = client.logger;\n    const logLevel = client.logLevel ?? 'off';\n    if (!logger) {\n        return noopLogger;\n    }\n    const cachedLogger = cachedLoggers.get(logger);\n    if (cachedLogger && cachedLogger[0] === logLevel) {\n        return cachedLogger[1];\n    }\n    const levelLogger = {\n        error: makeLogFn('error', logger, logLevel),\n        warn: makeLogFn('warn', logger, logLevel),\n        info: makeLogFn('info', logger, logLevel),\n        debug: makeLogFn('debug', logger, logLevel),\n    };\n    cachedLoggers.set(logger, [logLevel, levelLogger]);\n    return levelLogger;\n}\nexport const formatRequestDetails = (details) => {\n    if (details.options) {\n        details.options = { ...details.options };\n        delete details.options['headers']; // redundant + leaks internals\n    }\n    if (details.headers) {\n        details.headers = Object.fromEntries((details.headers instanceof Headers ? [...details.headers] : Object.entries(details.headers)).map(([name, value]) => [\n            name,\n            (name.toLowerCase() === 'authorization' ||\n                name.toLowerCase() === 'cookie' ||\n                name.toLowerCase() === 'set-cookie') ?\n                '***'\n                : value,\n        ]));\n    }\n    if ('retryOfRequestLogID' in details) {\n        if (details.retryOfRequestLogID) {\n            details.retryOf = details.retryOfRequestLogID;\n        }\n        delete details.retryOfRequestLogID;\n    }\n    return details;\n};\n//# sourceMappingURL=log.mjs.map","export const VERSION = '5.1.0'; // x-release-please-version\n//# sourceMappingURL=version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { VERSION } from \"../version.mjs\";\nexport const isRunningInBrowser = () => {\n    return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n        // @ts-ignore\n        typeof window.document !== 'undefined' &&\n        // @ts-ignore\n        typeof navigator !== 'undefined');\n};\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */\nfunction getDetectedPlatform() {\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\n        return 'deno';\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return 'edge';\n    }\n    if (Object.prototype.toString.call(typeof globalThis.process !== 'undefined' ? globalThis.process : 0) === '[object process]') {\n        return 'node';\n    }\n    return 'unknown';\n}\nconst getPlatformProperties = () => {\n    const detectedPlatform = getDetectedPlatform();\n    if (detectedPlatform === 'deno') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n            'X-Stainless-Runtime': 'deno',\n            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n        };\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\n            'X-Stainless-Runtime': 'edge',\n            'X-Stainless-Runtime-Version': globalThis.process.version,\n        };\n    }\n    // Check if Node.js\n    if (detectedPlatform === 'node') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(globalThis.process.platform ?? 'unknown'),\n            'X-Stainless-Arch': normalizeArch(globalThis.process.arch ?? 'unknown'),\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': globalThis.process.version ?? 'unknown',\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': 'unknown',\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n            'X-Stainless-Runtime-Version': browserInfo.version,\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        'X-Stainless-Lang': 'js',\n        'X-Stainless-Package-Version': VERSION,\n        'X-Stainless-OS': 'Unknown',\n        'X-Stainless-Arch': 'unknown',\n        'X-Stainless-Runtime': 'unknown',\n        'X-Stainless-Runtime-Version': 'unknown',\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === 'undefined' || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns) {\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return { browser: key, version: `${major}.${minor}.${patch}` };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch) => {\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === 'x32')\n        return 'x32';\n    if (arch === 'x86_64' || arch === 'x64')\n        return 'x64';\n    if (arch === 'arm')\n        return 'arm';\n    if (arch === 'aarch64' || arch === 'arm64')\n        return 'arm64';\n    if (arch)\n        return `other:${arch}`;\n    return 'unknown';\n};\nconst normalizePlatform = (platform) => {\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes('ios'))\n        return 'iOS';\n    if (platform === 'android')\n        return 'Android';\n    if (platform === 'darwin')\n        return 'MacOS';\n    if (platform === 'win32')\n        return 'Windows';\n    if (platform === 'freebsd')\n        return 'FreeBSD';\n    if (platform === 'openbsd')\n        return 'OpenBSD';\n    if (platform === 'linux')\n        return 'Linux';\n    if (platform)\n        return `Other:${platform}`;\n    return 'Unknown';\n};\nlet _platformHeaders;\nexport const getPlatformHeaders = () => {\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\n};\n//# sourceMappingURL=detect-platform.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport function getDefaultFetch() {\n    if (typeof fetch !== 'undefined') {\n        return fetch;\n    }\n    throw new Error('`fetch` is not defined as a global; Either pass `fetch` to the client, `new OpenAI({ fetch })` or polyfill the global, `globalThis.fetch = fetch`');\n}\nexport function makeReadableStream(...args) {\n    const ReadableStream = globalThis.ReadableStream;\n    if (typeof ReadableStream === 'undefined') {\n        // Note: All of the platforms / runtimes we officially support already define\n        // `ReadableStream` as a global, so this should only ever be hit on unsupported runtimes.\n        throw new Error('`ReadableStream` is not defined as a global; You will need to polyfill it, `globalThis.ReadableStream = ReadableStream`');\n    }\n    return new ReadableStream(...args);\n}\nexport function ReadableStreamFrom(iterable) {\n    let iter = Symbol.asyncIterator in iterable ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n    return makeReadableStream({\n        start() { },\n        async pull(controller) {\n            const { done, value } = await iter.next();\n            if (done) {\n                controller.close();\n            }\n            else {\n                controller.enqueue(value);\n            }\n        },\n        async cancel() {\n            await iter.return?.();\n        },\n    });\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function ReadableStreamToAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator])\n        return stream;\n    const reader = stream.getReader();\n    return {\n        async next() {\n            try {\n                const result = await reader.read();\n                if (result?.done)\n                    reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            }\n            catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return() {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return { done: true, value: undefined };\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n/**\n * Cancels a ReadableStream we don't need to consume.\n * See https://undici.nodejs.org/#/?id=garbage-collection\n */\nexport async function CancelReadableStream(stream) {\n    if (stream === null || typeof stream !== 'object')\n        return;\n    if (stream[Symbol.asyncIterator]) {\n        await stream[Symbol.asyncIterator]().return?.();\n        return;\n    }\n    const reader = stream.getReader();\n    const cancelPromise = reader.cancel();\n    reader.releaseLock();\n    await cancelPromise;\n}\n//# sourceMappingURL=shims.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport const FallbackEncoder = ({ headers, body }) => {\n    return {\n        bodyHeaders: {\n            'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    };\n};\n//# sourceMappingURL=request-options.mjs.map","export const default_format = 'RFC3986';\nexport const formatters = {\n    RFC1738: (v) => String(v).replace(/%20/g, '+'),\n    RFC3986: (v) => String(v),\n};\nexport const RFC1738 = 'RFC1738';\nexport const RFC3986 = 'RFC3986';\n//# sourceMappingURL=formats.mjs.map","import { RFC1738 } from \"./formats.mjs\";\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\nconst hex_table = (() => {\n    const array = [];\n    for (let i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n    return array;\n})();\nfunction compact_queue(queue) {\n    while (queue.length > 1) {\n        const item = queue.pop();\n        if (!item)\n            continue;\n        const obj = item.obj[item.prop];\n        if (is_array(obj)) {\n            const compacted = [];\n            for (let j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n            // @ts-ignore\n            item.obj[item.prop] = compacted;\n        }\n    }\n}\nfunction array_to_object(source, options) {\n    const obj = options && options.plainObjects ? Object.create(null) : {};\n    for (let i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n}\nexport function merge(target, source, options = {}) {\n    if (!source) {\n        return target;\n    }\n    if (typeof source !== 'object') {\n        if (is_array(target)) {\n            target.push(source);\n        }\n        else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) ||\n                !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        }\n        else {\n            return [target, source];\n        }\n        return target;\n    }\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n    let mergeTarget = target;\n    if (is_array(target) && !is_array(source)) {\n        // @ts-ignore\n        mergeTarget = array_to_object(target, options);\n    }\n    if (is_array(target) && is_array(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                const targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n            else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function (acc, key) {\n        const value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        }\n        else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n}\nexport function assign_single_source(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n}\nexport function decode(str, _, charset) {\n    const strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    }\n    catch (e) {\n        return strWithoutPlus;\n    }\n}\nconst limit = 1024;\nexport const encode = (str, _defaultEncoder, charset, _kind, format) => {\n    // This code was originally written by Brian White for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    let string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    }\n    else if (typeof str !== 'string') {\n        string = String(str);\n    }\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n    let out = '';\n    for (let j = 0; j < string.length; j += limit) {\n        const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        const arr = [];\n        for (let i = 0; i < segment.length; ++i) {\n            let c = segment.charCodeAt(i);\n            if (c === 0x2d || // -\n                c === 0x2e || // .\n                c === 0x5f || // _\n                c === 0x7e || // ~\n                (c >= 0x30 && c <= 0x39) || // 0-9\n                (c >= 0x41 && c <= 0x5a) || // a-z\n                (c >= 0x61 && c <= 0x7a) || // A-Z\n                (format === RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n            if (c < 0x80) {\n                arr[arr.length] = hex_table[c];\n                continue;\n            }\n            if (c < 0x800) {\n                arr[arr.length] = hex_table[0xc0 | (c >> 6)] + hex_table[0x80 | (c & 0x3f)];\n                continue;\n            }\n            if (c < 0xd800 || c >= 0xe000) {\n                arr[arr.length] =\n                    hex_table[0xe0 | (c >> 12)] + hex_table[0x80 | ((c >> 6) & 0x3f)] + hex_table[0x80 | (c & 0x3f)];\n                continue;\n            }\n            i += 1;\n            c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff));\n            arr[arr.length] =\n                hex_table[0xf0 | (c >> 18)] +\n                    hex_table[0x80 | ((c >> 12) & 0x3f)] +\n                    hex_table[0x80 | ((c >> 6) & 0x3f)] +\n                    hex_table[0x80 | (c & 0x3f)];\n        }\n        out += arr.join('');\n    }\n    return out;\n};\nexport function compact(value) {\n    const queue = [{ obj: { o: value }, prop: 'o' }];\n    const refs = [];\n    for (let i = 0; i < queue.length; ++i) {\n        const item = queue[i];\n        // @ts-ignore\n        const obj = item.obj[item.prop];\n        const keys = Object.keys(obj);\n        for (let j = 0; j < keys.length; ++j) {\n            const key = keys[j];\n            const val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n    compact_queue(queue);\n    return value;\n}\nexport function is_regexp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\nexport function is_buffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\nexport function combine(a, b) {\n    return [].concat(a, b);\n}\nexport function maybe_map(val, fn) {\n    if (is_array(val)) {\n        const mapped = [];\n        for (let i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n}\n//# sourceMappingURL=utils.mjs.map","import { encode, is_buffer, maybe_map } from \"./utils.mjs\";\nimport { default_format, formatters } from \"./formats.mjs\";\nconst has = Object.prototype.hasOwnProperty;\nconst array_prefix_generators = {\n    brackets(prefix) {\n        return String(prefix) + '[]';\n    },\n    comma: 'comma',\n    indices(prefix, key) {\n        return String(prefix) + '[' + key + ']';\n    },\n    repeat(prefix) {\n        return String(prefix);\n    },\n};\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function (arr, value_or_array) {\n    push.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);\n};\nconst to_ISO = Date.prototype.toISOString;\nconst defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: encode,\n    encodeValuesOnly: false,\n    format: default_format,\n    formatter: formatters[default_format],\n    /** @deprecated */\n    indices: false,\n    serializeDate(date) {\n        return to_ISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false,\n};\nfunction is_non_nullish_primitive(v) {\n    return (typeof v === 'string' ||\n        typeof v === 'number' ||\n        typeof v === 'boolean' ||\n        typeof v === 'symbol' ||\n        typeof v === 'bigint');\n}\nconst sentinel = {};\nfunction inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    let obj = object;\n    let tmp_sc = sideChannel;\n    let step = 0;\n    let find_flag = false;\n    while ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {\n        // Where object last appeared in the ref tree\n        const pos = tmp_sc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            }\n            else {\n                find_flag = true; // Break while\n            }\n        }\n        if (typeof tmp_sc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    }\n    else if (obj instanceof Date) {\n        obj = serializeDate?.(obj);\n    }\n    else if (generateArrayPrefix === 'comma' && is_array(obj)) {\n        obj = maybe_map(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate?.(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ?\n                // @ts-expect-error\n                encoder(prefix, defaults.encoder, charset, 'key', format)\n                : prefix;\n        }\n        obj = '';\n    }\n    if (is_non_nullish_primitive(obj) || is_buffer(obj)) {\n        if (encoder) {\n            const key_value = encodeValuesOnly ? prefix\n                // @ts-expect-error\n                : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [\n                formatter?.(key_value) +\n                    '=' +\n                    // @ts-expect-error\n                    formatter?.(encoder(obj, defaults.encoder, charset, 'value', format)),\n            ];\n        }\n        return [formatter?.(prefix) + '=' + formatter?.(String(obj))];\n    }\n    const values = [];\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n    let obj_keys;\n    if (generateArrayPrefix === 'comma' && is_array(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            // @ts-expect-error values only\n            obj = maybe_map(obj, encoder);\n        }\n        obj_keys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    }\n    else if (is_array(filter)) {\n        obj_keys = filter;\n    }\n    else {\n        const keys = Object.keys(obj);\n        obj_keys = sort ? keys.sort(sort) : keys;\n    }\n    const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n    const adjusted_prefix = commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;\n    if (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n        return adjusted_prefix + '[]';\n    }\n    for (let j = 0; j < obj_keys.length; ++j) {\n        const key = obj_keys[j];\n        const value = \n        // @ts-ignore\n        typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        // @ts-ignore\n        const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        const key_prefix = is_array(obj) ?\n            typeof generateArrayPrefix === 'function' ?\n                generateArrayPrefix(adjusted_prefix, encoded_key)\n                : adjusted_prefix\n            : adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');\n        sideChannel.set(object, step);\n        const valueSideChannel = new WeakMap();\n        valueSideChannel.set(sentinel, sideChannel);\n        push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, \n        // @ts-ignore\n        generateArrayPrefix === 'comma' && encodeValuesOnly && is_array(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n}\nfunction normalize_stringify_options(opts = defaults) {\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n    const charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    let format = default_format;\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    const formatter = formatters[format];\n    let filter = defaults.filter;\n    if (typeof opts.filter === 'function' || is_array(opts.filter)) {\n        filter = opts.filter;\n    }\n    let arrayFormat;\n    if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n        arrayFormat = opts.arrayFormat;\n    }\n    else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    }\n    else {\n        arrayFormat = defaults.arrayFormat;\n    }\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    const allowDots = typeof opts.allowDots === 'undefined' ?\n        !!opts.encodeDotInKeys === true ?\n            true\n            : defaults.allowDots\n        : !!opts.allowDots;\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        // @ts-ignore\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        // @ts-ignore\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n    };\n}\nexport function stringify(object, opts = {}) {\n    let obj = object;\n    const options = normalize_stringify_options(opts);\n    let obj_keys;\n    let filter;\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    }\n    else if (is_array(options.filter)) {\n        filter = options.filter;\n        obj_keys = filter;\n    }\n    const keys = [];\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n    const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n    const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n    if (!obj_keys) {\n        obj_keys = Object.keys(obj);\n    }\n    if (options.sort) {\n        obj_keys.sort(options.sort);\n    }\n    const sideChannel = new WeakMap();\n    for (let i = 0; i < obj_keys.length; ++i) {\n        const key = obj_keys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        push_to_array(keys, inner_stringify(obj[key], key, \n        // @ts-expect-error\n        generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    const joined = keys.join(options.delimiter);\n    let prefix = options.addQueryPrefix === true ? '?' : '';\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        }\n        else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n    return joined.length > 0 ? prefix + joined : '';\n}\n//# sourceMappingURL=stringify.mjs.map","import { default_format, formatters, RFC1738, RFC3986 } from \"./formats.mjs\";\nconst formats = {\n    formatters,\n    RFC1738,\n    RFC3986,\n    default: default_format,\n};\nexport { stringify } from \"./stringify.mjs\";\nexport { formats };\n//# sourceMappingURL=index.mjs.map","export function concatBytes(buffers) {\n    let length = 0;\n    for (const buffer of buffers) {\n        length += buffer.length;\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const buffer of buffers) {\n        output.set(buffer, index);\n        index += buffer.length;\n    }\n    return output;\n}\nlet encodeUTF8_;\nexport function encodeUTF8(str) {\n    let encoder;\n    return (encodeUTF8_ ??\n        ((encoder = new globalThis.TextEncoder()), (encodeUTF8_ = encoder.encode.bind(encoder))))(str);\n}\nlet decodeUTF8_;\nexport function decodeUTF8(bytes) {\n    let decoder;\n    return (decodeUTF8_ ??\n        ((decoder = new globalThis.TextDecoder()), (decodeUTF8_ = decoder.decode.bind(decoder))))(bytes);\n}\n//# sourceMappingURL=bytes.mjs.map","var _LineDecoder_buffer, _LineDecoder_carriageReturnIndex;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../tslib.mjs\";\nimport { concatBytes, decodeUTF8, encodeUTF8 } from \"../utils/bytes.mjs\";\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n    constructor() {\n        _LineDecoder_buffer.set(this, void 0);\n        _LineDecoder_carriageReturnIndex.set(this, void 0);\n        __classPrivateFieldSet(this, _LineDecoder_buffer, new Uint8Array(), \"f\");\n        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    decode(chunk) {\n        if (chunk == null) {\n            return [];\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? encodeUTF8(chunk)\n                : chunk;\n        __classPrivateFieldSet(this, _LineDecoder_buffer, concatBytes([__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\"), binaryChunk]), \"f\");\n        const lines = [];\n        let patternIndex;\n        while ((patternIndex = findNewlineIndex(__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\"), __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null) {\n            if (patternIndex.carriage && __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n                // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n                __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n                continue;\n            }\n            // we got double \\r or \\rtext\\n\n            if (__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") != null &&\n                (patternIndex.index !== __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n                lines.push(decodeUTF8(__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(0, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n                __classPrivateFieldSet(this, _LineDecoder_buffer, __classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n                continue;\n            }\n            const endIndex = __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n            const line = decodeUTF8(__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(0, endIndex));\n            lines.push(line);\n            __classPrivateFieldSet(this, _LineDecoder_buffer, __classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(patternIndex.index), \"f\");\n            __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        }\n        return lines;\n    }\n    flush() {\n        if (!__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").length) {\n            return [];\n        }\n        return this.decode('\\n');\n    }\n}\n_LineDecoder_buffer = new WeakMap(), _LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(buffer, startIndex) {\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = startIndex ?? 0; i < buffer.length; i++) {\n        if (buffer[i] === newline) {\n            return { preceding: i, index: i + 1, carriage: false };\n        }\n        if (buffer[i] === carriage) {\n            return { preceding: i, index: i + 1, carriage: true };\n        }\n    }\n    return null;\n}\nexport function findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = 0; i < buffer.length - 1; i++) {\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage &&\n            buffer[i + 1] === newline &&\n            i + 3 < buffer.length &&\n            buffer[i + 2] === carriage &&\n            buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n}\n//# sourceMappingURL=line.mjs.map","import { OpenAIError } from \"./error.mjs\";\nimport { makeReadableStream } from \"../internal/shims.mjs\";\nimport { findDoubleNewlineIndex, LineDecoder } from \"../internal/decoders/line.mjs\";\nimport { ReadableStreamToAsyncIterable } from \"../internal/shims.mjs\";\nimport { isAbortError } from \"../internal/errors.mjs\";\nimport { encodeUTF8 } from \"../internal/utils/bytes.mjs\";\nimport { APIError } from \"./error.mjs\";\nexport class Stream {\n    constructor(iterator, controller) {\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        async function* iterator() {\n            if (consumed) {\n                throw new OpenAIError('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)) {\n                    if (done)\n                        continue;\n                    if (sse.data.startsWith('[DONE]')) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null ||\n                        sse.event.startsWith('response.') ||\n                        sse.event.startsWith('transcript.')) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new APIError(undefined, data.error, undefined, response.headers);\n                        }\n                        yield data;\n                    }\n                    else {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        // TODO: Is this where the error should be thrown?\n                        if (sse.event == 'error') {\n                            throw new APIError(undefined, data.error, data.message, undefined);\n                        }\n                        yield { event: sse.event, data: data };\n                    }\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (isAbortError(e))\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */\n    static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = ReadableStreamToAsyncIterable(readableStream);\n            for await (const chunk of iter) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new OpenAIError('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()) {\n                    if (done)\n                        continue;\n                    if (line)\n                        yield JSON.parse(line);\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (isAbortError(e))\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */\n    tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue) => {\n            return {\n                next: () => {\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                },\n            };\n        };\n        return [\n            new Stream(() => teeIterator(left), this.controller),\n            new Stream(() => teeIterator(right), this.controller),\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */\n    toReadableStream() {\n        const self = this;\n        let iter;\n        return makeReadableStream({\n            async start() {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull(ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done)\n                        return ctrl.close();\n                    const bytes = encodeUTF8(JSON.stringify(value) + '\\n');\n                    ctrl.enqueue(bytes);\n                }\n                catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel() {\n                await iter.return?.();\n            },\n        });\n    }\n}\nexport async function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        if (typeof globalThis.navigator !== 'undefined' &&\n            globalThis.navigator.product === 'ReactNative') {\n            throw new OpenAIError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n        }\n        throw new OpenAIError(`Attempted to iterate over a response with no body`);\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new LineDecoder();\n    const iter = ReadableStreamToAsyncIterable(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)) {\n        for (const line of lineDecoder.decode(sseChunk)) {\n            const sse = sseDecoder.decode(line);\n            if (sse)\n                yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()) {\n        const sse = sseDecoder.decode(line);\n        if (sse)\n            yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator) {\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? encodeUTF8(chunk)\n                : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nclass SSEDecoder {\n    constructor() {\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith('\\r')) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length)\n                return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join('\\n'),\n                raw: this.chunks,\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(':')) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, ':');\n        if (value.startsWith(' ')) {\n            value = value.substring(1);\n        }\n        if (fieldname === 'event') {\n            this.event = value;\n        }\n        else if (fieldname === 'data') {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n    }\n    return [str, '', ''];\n}\n//# sourceMappingURL=streaming.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { Stream } from \"../core/streaming.mjs\";\nimport { formatRequestDetails, loggerFor } from \"./utils/log.mjs\";\nexport async function defaultParseResponse(client, props) {\n    const { response, requestLogID, retryOfRequestLogID, startTime } = props;\n    const body = await (async () => {\n        if (props.options.stream) {\n            loggerFor(client).debug('response', response.status, response.url, response.headers, response.body);\n            // Note: there is an invariant here that isn't represented in the type system\n            // that if you set `stream: true` the response type must also be `Stream<T>`\n            if (props.options.__streamClass) {\n                return props.options.__streamClass.fromSSEResponse(response, props.controller);\n            }\n            return Stream.fromSSEResponse(response, props.controller);\n        }\n        // fetch refuses to read the body when the status code is 204.\n        if (response.status === 204) {\n            return null;\n        }\n        if (props.options.__binaryResponse) {\n            return response;\n        }\n        const contentType = response.headers.get('content-type');\n        const mediaType = contentType?.split(';')[0]?.trim();\n        const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');\n        if (isJSON) {\n            const json = await response.json();\n            return addRequestID(json, response);\n        }\n        const text = await response.text();\n        return text;\n    })();\n    loggerFor(client).debug(`[${requestLogID}] response parsed`, formatRequestDetails({\n        retryOfRequestLogID,\n        url: response.url,\n        status: response.status,\n        body,\n        durationMs: Date.now() - startTime,\n    }));\n    return body;\n}\nexport function addRequestID(value, response) {\n    if (!value || typeof value !== 'object' || Array.isArray(value)) {\n        return value;\n    }\n    return Object.defineProperty(value, '_request_id', {\n        value: response.headers.get('x-request-id'),\n        enumerable: false,\n    });\n}\n//# sourceMappingURL=parse.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { defaultParseResponse, addRequestID, } from \"../internal/parse.mjs\";\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n    constructor(client, responsePromise, parseResponse = defaultParseResponse) {\n        super((resolve) => {\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n        _APIPromise_client.set(this, void 0);\n        __classPrivateFieldSet(this, _APIPromise_client, client, \"f\");\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(__classPrivateFieldGet(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props) => addRequestID(transform(await this.parseResponse(client, props), props), props.response));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */\n    asResponse() {\n        return this.responsePromise.then((p) => p.response);\n    }\n    /**\n     * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n     * returned via the X-Request-ID header which is useful for debugging requests and reporting\n     * issues to OpenAI.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */\n    async withResponse() {\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n        return { data, response, request_id: response.headers.get('x-request-id') };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then((data) => this.parseResponse(__classPrivateFieldGet(this, _APIPromise_client, \"f\"), data));\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\n_APIPromise_client = new WeakMap();\n//# sourceMappingURL=api-promise.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _AbstractPage_client;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { OpenAIError } from \"./error.mjs\";\nimport { defaultParseResponse } from \"../internal/parse.mjs\";\nimport { APIPromise } from \"./api-promise.mjs\";\nimport { maybeObj } from \"../internal/utils/values.mjs\";\nexport class AbstractPage {\n    constructor(client, response, body, options) {\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length)\n            return false;\n        return this.nextPageRequestOptions() != null;\n    }\n    async getNextPage() {\n        const nextOptions = this.nextPageRequestOptions();\n        if (!nextOptions) {\n            throw new OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        let page = this;\n        yield page;\n        while (page.hasNextPage()) {\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()) {\n            for (const item of page.getPaginatedItems()) {\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n    constructor(client, request, Page) {\n        super(client, request, async (client, props) => new Page(client, props.response, await defaultParseResponse(client, props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */\n    async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page) {\n            yield item;\n        }\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.object = body.object;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    nextPageRequestOptions() {\n        return null;\n    }\n}\nexport class CursorPage extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.has_more = body.has_more || false;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    hasNextPage() {\n        if (this.has_more === false) {\n            return false;\n        }\n        return super.hasNextPage();\n    }\n    nextPageRequestOptions() {\n        const data = this.getPaginatedItems();\n        const id = data[data.length - 1]?.id;\n        if (!id) {\n            return null;\n        }\n        return {\n            ...this.options,\n            query: {\n                ...maybeObj(this.options.query),\n                after: id,\n            },\n        };\n    }\n}\n//# sourceMappingURL=pagination.mjs.map","import { ReadableStreamFrom } from \"./shims.mjs\";\nexport const checkFileSupport = () => {\n    if (typeof File === 'undefined') {\n        const { process } = globalThis;\n        const isOldNode = typeof process?.versions?.node === 'string' && parseInt(process.versions.node.split('.')) < 20;\n        throw new Error('`File` is not defined as a global, which is required for file uploads.' +\n            (isOldNode ?\n                \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\"\n                : ''));\n    }\n};\n/**\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\n * for environments that don't define a global `File` yet.\n */\nexport function makeFile(fileBits, fileName, options) {\n    checkFileSupport();\n    return new File(fileBits, fileName ?? 'unknown_file', options);\n}\nexport function getName(value) {\n    return (((typeof value === 'object' &&\n        value !== null &&\n        (('name' in value && value.name && String(value.name)) ||\n            ('url' in value && value.url && String(value.url)) ||\n            ('filename' in value && value.filename && String(value.filename)) ||\n            ('path' in value && value.path && String(value.path)))) ||\n        '')\n        .split(/[\\\\/]/)\n        .pop() || undefined);\n}\nexport const isAsyncIterable = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async (opts, fetch) => {\n    if (!hasUploadableValue(opts.body))\n        return opts;\n    return { ...opts, body: await createForm(opts.body, fetch) };\n};\nexport const multipartFormRequestOptions = async (opts, fetch) => {\n    return { ...opts, body: await createForm(opts.body, fetch) };\n};\nconst supportsFormDataMap = new WeakMap();\n/**\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\n * This function detects if the fetch function provided supports the global FormData object to avoid\n * confusing error messages later on.\n */\nfunction supportsFormData(fetchObject) {\n    const fetch = typeof fetchObject === 'function' ? fetchObject : fetchObject.fetch;\n    const cached = supportsFormDataMap.get(fetch);\n    if (cached)\n        return cached;\n    const promise = (async () => {\n        try {\n            const FetchResponse = ('Response' in fetch ?\n                fetch.Response\n                : (await fetch('data:,')).constructor);\n            const data = new FormData();\n            if (data.toString() === (await new FetchResponse(data).text())) {\n                return false;\n            }\n            return true;\n        }\n        catch {\n            // avoid false negatives\n            return true;\n        }\n    })();\n    supportsFormDataMap.set(fetch, promise);\n    return promise;\n}\nexport const createForm = async (body, fetch) => {\n    if (!(await supportsFormData(fetch))) {\n        throw new TypeError('The provided fetch function does not support file uploads with the current global FormData class.');\n    }\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n    return form;\n};\n// We check for Blob not File because Bun.File doesn't inherit from File,\n// but they both inherit from Blob and have a `name` property at runtime.\nconst isNamedBlob = (value) => value instanceof Blob && 'name' in value;\nconst isUploadable = (value) => typeof value === 'object' &&\n    value !== null &&\n    (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\nconst hasUploadableValue = (value) => {\n    if (isUploadable(value))\n        return true;\n    if (Array.isArray(value))\n        return value.some(hasUploadableValue);\n    if (value && typeof value === 'object') {\n        for (const k in value) {\n            if (hasUploadableValue(value[k]))\n                return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value) => {\n    if (value === undefined)\n        return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        form.append(key, String(value));\n    }\n    else if (value instanceof Response) {\n        form.append(key, makeFile([await value.blob()], getName(value)));\n    }\n    else if (isAsyncIterable(value)) {\n        form.append(key, makeFile([await new Response(ReadableStreamFrom(value)).blob()], getName(value)));\n    }\n    else if (isNamedBlob(value)) {\n        form.append(key, value, getName(value));\n    }\n    else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n    }\n    else if (typeof value === 'object') {\n        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n    }\n    else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n};\n//# sourceMappingURL=uploads.mjs.map","import { getName, makeFile, isAsyncIterable } from \"./uploads.mjs\";\nimport { checkFileSupport } from \"./uploads.mjs\";\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isBlobLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.size === 'number' &&\n    typeof value.type === 'string' &&\n    typeof value.text === 'function' &&\n    typeof value.slice === 'function' &&\n    typeof value.arrayBuffer === 'function';\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isFileLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.name === 'string' &&\n    typeof value.lastModified === 'number' &&\n    isBlobLike(value);\nconst isResponseLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.url === 'string' &&\n    typeof value.blob === 'function';\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options) {\n    checkFileSupport();\n    // If it's a promise, resolve it.\n    value = await value;\n    // If we've been given a `File` we don't need to do anything\n    if (isFileLike(value)) {\n        if (value instanceof File) {\n            return value;\n        }\n        return makeFile([await value.arrayBuffer()], value.name);\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop());\n        return makeFile(await getBytes(blob), name, options);\n    }\n    const parts = await getBytes(value);\n    name || (name = getName(value));\n    if (!options?.type) {\n        const type = parts.find((part) => typeof part === 'object' && 'type' in part && part.type);\n        if (typeof type === 'string') {\n            options = { ...options, type };\n        }\n    }\n    return makeFile(parts, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === 'string' ||\n        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n        value instanceof ArrayBuffer) {\n        parts.push(value);\n    }\n    else if (isBlobLike(value)) {\n        parts.push(value instanceof Blob ? value : await value.arrayBuffer());\n    }\n    else if (isAsyncIterable(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value) {\n            parts.push(...(await getBytes(chunk))); // TODO, consider validating?\n        }\n    }\n    else {\n        const constructor = value?.constructor?.name;\n        throw new Error(`Unexpected data type: ${typeof value}${constructor ? `; constructor: ${constructor}` : ''}${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    if (typeof value !== 'object' || value === null)\n        return '';\n    const props = Object.getOwnPropertyNames(value);\n    return `; props: [${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n//# sourceMappingURL=to-file.mjs.map","export { toFile } from \"../internal/to-file.mjs\";\n//# sourceMappingURL=uploads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport class APIResource {\n    constructor(client) {\n        this._client = client;\n    }\n}\n//# sourceMappingURL=resource.mjs.map","import { OpenAIError } from \"../../core/error.mjs\";\n/**\n * Percent-encode everything that isn't safe to have in a path without encoding safe chars.\n *\n * Taken from https://datatracker.ietf.org/doc/html/rfc3986#section-3.3:\n * > unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n * > sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * > pchar       = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n */\nexport function encodeURIPath(str) {\n    return str.replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]+/g, encodeURIComponent);\n}\nexport const createPathTagFunction = (pathEncoder = encodeURIPath) => function path(statics, ...params) {\n    // If there are no params, no processing is needed.\n    if (statics.length === 1)\n        return statics[0];\n    let postPath = false;\n    const path = statics.reduce((previousValue, currentValue, index) => {\n        if (/[?#]/.test(currentValue)) {\n            postPath = true;\n        }\n        return (previousValue +\n            currentValue +\n            (index === params.length ? '' : (postPath ? encodeURIComponent : pathEncoder)(String(params[index]))));\n    }, '');\n    const pathOnly = path.split(/[?#]/, 1)[0];\n    const invalidSegments = [];\n    const invalidSegmentPattern = /(?<=^|\\/)(?:\\.|%2e){1,2}(?=\\/|$)/gi;\n    let match;\n    // Find all invalid segments\n    while ((match = invalidSegmentPattern.exec(pathOnly)) !== null) {\n        invalidSegments.push({\n            start: match.index,\n            length: match[0].length,\n        });\n    }\n    if (invalidSegments.length > 0) {\n        let lastEnd = 0;\n        const underline = invalidSegments.reduce((acc, segment) => {\n            const spaces = ' '.repeat(segment.start - lastEnd);\n            const arrows = '^'.repeat(segment.length);\n            lastEnd = segment.start + segment.length;\n            return acc + spaces + arrows;\n        }, '');\n        throw new OpenAIError(`Path parameters result in path with invalid segments:\\n${path}\\n${underline}`);\n    }\n    return path;\n};\n/**\n * URI-encodes path params and ensures no unsafe /./ or /../ path segments are introduced.\n */\nexport const path = createPathTagFunction(encodeURIPath);\n//# sourceMappingURL=path.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Messages extends APIResource {\n    /**\n     * Get the messages in a stored chat completion. Only Chat Completions that have\n     * been created with the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\n     *   'completion_id',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(completionID, query = {}, options) {\n        return this._client.getAPIList(path `/chat/completions/${completionID}/messages`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=messages.mjs.map","export * from \"./core/error.mjs\";\n//# sourceMappingURL=error.mjs.map","export function isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === 'function';\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nexport class ParsingToolFunction {\n    constructor(input) {\n        this.type = 'function';\n        this.function = input;\n    }\n}\n//# sourceMappingURL=RunnableFunction.mjs.map","export const isAssistantMessage = (message) => {\n    return message?.role === 'assistant';\n};\nexport const isToolMessage = (message) => {\n    return message?.role === 'tool';\n};\nexport function isPresent(obj) {\n    return obj != null;\n}\n//# sourceMappingURL=chatCompletionUtils.mjs.map","var _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { APIUserAbortError, OpenAIError } from \"../error.mjs\";\nexport class EventStream {\n    constructor() {\n        _EventStream_instances.add(this);\n        this.controller = new AbortController();\n        _EventStream_connectedPromise.set(this, void 0);\n        _EventStream_resolveConnectedPromise.set(this, () => { });\n        _EventStream_rejectConnectedPromise.set(this, () => { });\n        _EventStream_endPromise.set(this, void 0);\n        _EventStream_resolveEndPromise.set(this, () => { });\n        _EventStream_rejectEndPromise.set(this, () => { });\n        _EventStream_listeners.set(this, {});\n        _EventStream_ended.set(this, false);\n        _EventStream_errored.set(this, false);\n        _EventStream_aborted.set(this, false);\n        _EventStream_catchingPromiseCreated.set(this, false);\n        __classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _EventStream_connectedPromise, \"f\").catch(() => { });\n        __classPrivateFieldGet(this, _EventStream_endPromise, \"f\").catch(() => { });\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(() => {\n            executor().then(() => {\n                this._emitFinal();\n                this._emit('end');\n            }, __classPrivateFieldGet(this, _EventStream_instances, \"m\", _EventStream_handleError).bind(this));\n        }, 0);\n    }\n    _connected() {\n        if (this.ended)\n            return;\n        __classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, \"f\").call(this);\n        this._emit('connect');\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _EventStream_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _EventStream_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _EventStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _EventStream_endPromise, \"f\");\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _EventStream_ended, \"f\")) {\n            return;\n        }\n        if (event === 'end') {\n            __classPrivateFieldSet(this, _EventStream_ended, true, \"f\");\n            __classPrivateFieldGet(this, _EventStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    _emitFinal() { }\n}\n_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {\n    __classPrivateFieldSet(this, _EventStream_errored, true, \"f\");\n    if (error instanceof Error && error.name === 'AbortError') {\n        error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n        __classPrivateFieldSet(this, _EventStream_aborted, true, \"f\");\n        return this._emit('abort', error);\n    }\n    if (error instanceof OpenAIError) {\n        return this._emit('error', error);\n    }\n    if (error instanceof Error) {\n        const openAIError = new OpenAIError(error.message);\n        // @ts-ignore\n        openAIError.cause = error;\n        return this._emit('error', openAIError);\n    }\n    return this._emit('error', new OpenAIError(String(error)));\n};\n//# sourceMappingURL=EventStream.mjs.map","import { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from \"../error.mjs\";\nexport function makeParseableResponseFormat(response_format, parser) {\n    const obj = { ...response_format };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-response-format',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function makeParseableTextFormat(response_format, parser) {\n    const obj = { ...response_format };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-response-format',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function isAutoParsableResponseFormat(response_format) {\n    return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\nexport function makeParseableTool(tool, { parser, callback, }) {\n    const obj = { ...tool };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-tool',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n        $callback: {\n            value: callback,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function isAutoParsableTool(tool) {\n    return tool?.['$brand'] === 'auto-parseable-tool';\n}\nexport function maybeParseChatCompletion(completion, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...completion,\n            choices: completion.choices.map((choice) => ({\n                ...choice,\n                message: {\n                    ...choice.message,\n                    parsed: null,\n                    ...(choice.message.tool_calls ?\n                        {\n                            tool_calls: choice.message.tool_calls,\n                        }\n                        : undefined),\n                },\n            })),\n        };\n    }\n    return parseChatCompletion(completion, params);\n}\nexport function parseChatCompletion(completion, params) {\n    const choices = completion.choices.map((choice) => {\n        if (choice.finish_reason === 'length') {\n            throw new LengthFinishReasonError();\n        }\n        if (choice.finish_reason === 'content_filter') {\n            throw new ContentFilterFinishReasonError();\n        }\n        return {\n            ...choice,\n            message: {\n                ...choice.message,\n                ...(choice.message.tool_calls ?\n                    {\n                        tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? undefined,\n                    }\n                    : undefined),\n                parsed: choice.message.content && !choice.message.refusal ?\n                    parseResponseFormat(params, choice.message.content)\n                    : null,\n            },\n        };\n    });\n    return { ...completion, choices };\n}\nfunction parseResponseFormat(params, content) {\n    if (params.response_format?.type !== 'json_schema') {\n        return null;\n    }\n    if (params.response_format?.type === 'json_schema') {\n        if ('$parseRaw' in params.response_format) {\n            const response_format = params.response_format;\n            return response_format.$parseRaw(content);\n        }\n        return JSON.parse(content);\n    }\n    return null;\n}\nfunction parseToolCall(params, toolCall) {\n    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n    return {\n        ...toolCall,\n        function: {\n            ...toolCall.function,\n            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\n                : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\n                    : null,\n        },\n    };\n}\nexport function shouldParseToolCall(params, toolCall) {\n    if (!params) {\n        return false;\n    }\n    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n    return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\nexport function hasAutoParseableInput(params) {\n    if (isAutoParsableResponseFormat(params.response_format)) {\n        return true;\n    }\n    return (params.tools?.some((t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true)) ?? false);\n}\nexport function validateInputTools(tools) {\n    for (const tool of tools ?? []) {\n        if (tool.type !== 'function') {\n            throw new OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n        }\n        if (tool.function.strict !== true) {\n            throw new OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n        }\n    }\n}\n//# sourceMappingURL=parser.mjs.map","var _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionToolCall, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nimport { __classPrivateFieldGet } from \"../internal/tslib.mjs\";\nimport { OpenAIError } from \"../error.mjs\";\nimport { isRunnableFunctionWithParse, } from \"./RunnableFunction.mjs\";\nimport { isAssistantMessage, isToolMessage } from \"./chatCompletionUtils.mjs\";\nimport { EventStream } from \"./EventStream.mjs\";\nimport { isAutoParsableTool, parseChatCompletion } from \"../lib/parser.mjs\";\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport class AbstractChatCompletionRunner extends EventStream {\n    constructor() {\n        super(...arguments);\n        _AbstractChatCompletionRunner_instances.add(this);\n        this._chatCompletions = [];\n        this.messages = [];\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit('chatCompletion', chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message)\n            this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        if (!('content' in message))\n            message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit('message', message);\n            if (isToolMessage(message) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit('functionToolCallResult', message.content);\n            }\n            else if (isAssistantMessage(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls) {\n                    if (tool_call.type === 'function') {\n                        this._emit('functionToolCall', tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */\n    async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion)\n            throw new OpenAIError('stream ended without producing a ChatCompletion');\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalFunctionToolCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n    }\n    async finalFunctionToolCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [...this._chatCompletions];\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion)\n            this._emit('finalChatCompletion', completion);\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage)\n            this._emit('finalMessage', finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent)\n            this._emit('finalContent', finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n        if (finalFunctionCall)\n            this._emit('finalFunctionToolCall', finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n        if (finalFunctionCallResult != null)\n            this._emit('finalFunctionToolCallResult', finalFunctionCallResult);\n        if (this._chatCompletions.some((c) => c.usage)) {\n            this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(client, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await client.chat.completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addChatCompletion(parseChatCompletion(chatCompletion, params));\n    }\n    async _runChatCompletion(client, params, options) {\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(client, params, options);\n    }\n    async _runTools(client, params, options) {\n        const role = 'tool';\n        const { tool_choice = 'auto', stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        // TODO(someday): clean this logic up\n        const inputTools = params.tools.map((tool) => {\n            if (isAutoParsableTool(tool)) {\n                if (!tool.$callback) {\n                    throw new OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n                }\n                return {\n                    type: 'function',\n                    function: {\n                        function: tool.$callback,\n                        name: tool.function.name,\n                        description: tool.function.description || '',\n                        parameters: tool.function.parameters,\n                        parse: tool.$parseRaw,\n                        strict: true,\n                    },\n                };\n            }\n            return tool;\n        });\n        const functionsByName = {};\n        for (const f of inputTools) {\n            if (f.type === 'function') {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = 'tools' in params ?\n            inputTools.map((t) => t.type === 'function' ?\n                {\n                    type: 'function',\n                    function: {\n                        name: t.function.name || t.function.function.name,\n                        parameters: t.function.parameters,\n                        description: t.function.description,\n                        strict: t.function.strict,\n                    },\n                }\n                : t)\n            : undefined;\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        for (let i = 0; i < maxChatCompletions; ++i) {\n            const chatCompletion = await this._createChatCompletion(client, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [...this.messages],\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls?.length) {\n                return;\n            }\n            for (const tool_call of message.tool_calls) {\n                if (tool_call.type !== 'function')\n                    continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName)\n                        .map((name) => JSON.stringify(name))\n                        .join(', ')}. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n                }\n                catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({ role, tool_call_id, content });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n}\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while (i-- > 0) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message)) {\n            // TODO: support audio here\n            const ret = {\n                ...message,\n                content: message.content ?? null,\n                refusal: message.refusal ?? null,\n            };\n            return ret;\n        }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCall = function _AbstractChatCompletionRunner_getFinalFunctionToolCall() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message) && message?.tool_calls?.length) {\n            return message.tool_calls.at(-1)?.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult = function _AbstractChatCompletionRunner_getFinalFunctionToolCallResult() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isToolMessage(message) &&\n            message.content != null &&\n            typeof message.content === 'string' &&\n            this.messages.some((x) => x.role === 'assistant' &&\n                x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id))) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return (typeof rawContent === 'string' ? rawContent\n        : rawContent === undefined ? 'undefined'\n            : JSON.stringify(rawContent));\n};\n//# sourceMappingURL=AbstractChatCompletionRunner.mjs.map","import { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { isAssistantMessage } from \"./chatCompletionUtils.mjs\";\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner {\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n        };\n        runner._run(() => runner._runTools(client, params, opts));\n        return runner;\n    }\n    _addMessage(message, emit = true) {\n        super._addMessage(message, emit);\n        if (isAssistantMessage(message) && message.content) {\n            this._emit('content', message.content);\n        }\n    }\n}\n//# sourceMappingURL=ChatCompletionRunner.mjs.map","export * from \"./core/streaming.mjs\";\n//# sourceMappingURL=streaming.mjs.map","const STR = 0b000000001;\nconst NUM = 0b000000010;\nconst ARR = 0b000000100;\nconst OBJ = 0b000001000;\nconst NULL = 0b000010000;\nconst BOOL = 0b000100000;\nconst NAN = 0b001000000;\nconst INFINITY = 0b010000000;\nconst MINUS_INFINITY = 0b100000000;\nconst INF = INFINITY | MINUS_INFINITY;\nconst SPECIAL = NULL | BOOL | INF | NAN;\nconst ATOM = STR | NUM | SPECIAL;\nconst COLLECTION = ARR | OBJ;\nconst ALL = ATOM | COLLECTION;\nconst Allow = {\n    STR,\n    NUM,\n    ARR,\n    OBJ,\n    NULL,\n    BOOL,\n    NAN,\n    INFINITY,\n    MINUS_INFINITY,\n    INF,\n    SPECIAL,\n    ATOM,\n    COLLECTION,\n    ALL,\n};\n// The JSON string segment was unable to be parsed completely\nclass PartialJSON extends Error {\n}\nclass MalformedJSON extends Error {\n}\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString, allowPartial = Allow.ALL) {\n    if (typeof jsonString !== 'string') {\n        throw new TypeError(`expecting str, got ${typeof jsonString}`);\n    }\n    if (!jsonString.trim()) {\n        throw new Error(`${jsonString} is empty`);\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\nconst _parseJSON = (jsonString, allow) => {\n    const length = jsonString.length;\n    let index = 0;\n    const markPartialJSON = (msg) => {\n        throw new PartialJSON(`${msg} at position ${index}`);\n    };\n    const throwMalformedError = (msg) => {\n        throw new MalformedJSON(`${msg} at position ${index}`);\n    };\n    const parseAny = () => {\n        skipBlank();\n        if (index >= length)\n            markPartialJSON('Unexpected end of input');\n        if (jsonString[index] === '\"')\n            return parseStr();\n        if (jsonString[index] === '{')\n            return parseObj();\n        if (jsonString[index] === '[')\n            return parseArr();\n        if (jsonString.substring(index, index + 4) === 'null' ||\n            (Allow.NULL & allow && length - index < 4 && 'null'.startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === 'true' ||\n            (Allow.BOOL & allow && length - index < 4 && 'true'.startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === 'false' ||\n            (Allow.BOOL & allow && length - index < 5 && 'false'.startsWith(jsonString.substring(index)))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === 'Infinity' ||\n            (Allow.INFINITY & allow && length - index < 8 && 'Infinity'.startsWith(jsonString.substring(index)))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === '-Infinity' ||\n            (Allow.MINUS_INFINITY & allow &&\n                1 < length - index &&\n                length - index < 9 &&\n                '-Infinity'.startsWith(jsonString.substring(index)))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === 'NaN' ||\n            (Allow.NAN & allow && length - index < 3 && 'NaN'.startsWith(jsonString.substring(index)))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n    const parseStr = () => {\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while (index < length && (jsonString[index] !== '\"' || (escape && jsonString[index - 1] === '\\\\'))) {\n            escape = jsonString[index] === '\\\\' ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n        else if (Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            }\n            catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('\\\\')) + '\"');\n            }\n        }\n        markPartialJSON('Unterminated string literal');\n    };\n    const parseObj = () => {\n        index++; // skip initial brace\n        skipBlank();\n        const obj = {};\n        try {\n            while (jsonString[index] !== '}') {\n                skipBlank();\n                if (index >= length && Allow.OBJ & allow)\n                    return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    Object.defineProperty(obj, key, { value, writable: true, enumerable: true, configurable: true });\n                }\n                catch (e) {\n                    if (Allow.OBJ & allow)\n                        return obj;\n                    else\n                        throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === ',')\n                    index++; // skip comma\n            }\n        }\n        catch (e) {\n            if (Allow.OBJ & allow)\n                return obj;\n            else\n                markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n    const parseArr = () => {\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while (jsonString[index] !== ']') {\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === ',') {\n                    index++; // skip comma\n                }\n            }\n        }\n        catch (e) {\n            if (Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n    const parseNum = () => {\n        if (index === 0) {\n            if (jsonString === '-' && Allow.NUM & allow)\n                markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            }\n            catch (e) {\n                if (Allow.NUM & allow) {\n                    try {\n                        if ('.' === jsonString[jsonString.length - 1])\n                            return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('.')));\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('e')));\n                    }\n                    catch (e) { }\n                }\n                throwMalformedError(String(e));\n            }\n        }\n        const start = index;\n        if (jsonString[index] === '-')\n            index++;\n        while (jsonString[index] && !',]}'.includes(jsonString[index]))\n            index++;\n        if (index == length && !(Allow.NUM & allow))\n            markPartialJSON('Unterminated number literal');\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        }\n        catch (e) {\n            if (jsonString.substring(start, index) === '-' && Allow.NUM & allow)\n                markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('e')));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n    const skipBlank = () => {\n        while (index < length && ' \\n\\r\\t'.includes(jsonString[index])) {\n            index++;\n        }\n    };\n    return parseAny();\n};\n// using this function with malformed JSON is undefined behavior\nconst partialParse = (input) => parseJSON(input, Allow.ALL ^ Allow.NUM);\nexport { partialParse, PartialJSON, MalformedJSON };\n//# sourceMappingURL=parser.mjs.map","var _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { OpenAIError, APIUserAbortError, LengthFinishReasonError, ContentFilterFinishReasonError, } from \"../error.mjs\";\nimport { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { Stream } from \"../streaming.mjs\";\nimport { hasAutoParseableInput, isAutoParsableResponseFormat, isAutoParsableTool, maybeParseChatCompletion, shouldParseToolCall, } from \"../lib/parser.mjs\";\nimport { partialParse } from \"../_vendor/partial-json-parser/parser.mjs\";\nexport class ChatCompletionStream extends AbstractChatCompletionRunner {\n    constructor(params) {\n        super();\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_params.set(this, void 0);\n        _ChatCompletionStream_choiceEventStates.set(this, void 0);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n        __classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    }\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream(null);\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(client, params, options) {\n        const runner = new ChatCompletionStream(params);\n        runner._run(() => runner._runChatCompletion(client, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\n        return runner;\n    }\n    async _createChatCompletion(client, params, options) {\n        super._createChatCompletion;\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await client.chat.completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const chunk of stream) {\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream) {\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended)\n            return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n        let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n        if (state) {\n            return state;\n        }\n        state = {\n            content_done: false,\n            refusal_done: false,\n            logprobs_content_done: false,\n            logprobs_refusal_done: false,\n            done_tool_calls: new Set(),\n            current_tool_call_index: null,\n        };\n        __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n        return state;\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended)\n            return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit('chunk', chunk, completion);\n        for (const choice of chunk.choices) {\n            const choiceSnapshot = completion.choices[choice.index];\n            if (choice.delta.content != null &&\n                choiceSnapshot.message?.role === 'assistant' &&\n                choiceSnapshot.message?.content) {\n                this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n                this._emit('content.delta', {\n                    delta: choice.delta.content,\n                    snapshot: choiceSnapshot.message.content,\n                    parsed: choiceSnapshot.message.parsed,\n                });\n            }\n            if (choice.delta.refusal != null &&\n                choiceSnapshot.message?.role === 'assistant' &&\n                choiceSnapshot.message?.refusal) {\n                this._emit('refusal.delta', {\n                    delta: choice.delta.refusal,\n                    snapshot: choiceSnapshot.message.refusal,\n                });\n            }\n            if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\n                this._emit('logprobs.content.delta', {\n                    content: choice.logprobs?.content,\n                    snapshot: choiceSnapshot.logprobs?.content ?? [],\n                });\n            }\n            if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\n                this._emit('logprobs.refusal.delta', {\n                    refusal: choice.logprobs?.refusal,\n                    snapshot: choiceSnapshot.logprobs?.refusal ?? [],\n                });\n            }\n            const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n            if (choiceSnapshot.finish_reason) {\n                __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                if (state.current_tool_call_index != null) {\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                }\n            }\n            for (const toolCall of choice.delta.tool_calls ?? []) {\n                if (state.current_tool_call_index !== toolCall.index) {\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                    // new tool call started, the previous one is done\n                    if (state.current_tool_call_index != null) {\n                        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                    }\n                }\n                state.current_tool_call_index = toolCall.index;\n            }\n            for (const toolCallDelta of choice.delta.tool_calls ?? []) {\n                const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n                if (!toolCallSnapshot?.type) {\n                    continue;\n                }\n                if (toolCallSnapshot?.type === 'function') {\n                    this._emit('tool_calls.function.arguments.delta', {\n                        name: toolCallSnapshot.function?.name,\n                        index: toolCallDelta.index,\n                        arguments: toolCallSnapshot.function.arguments,\n                        parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n                        arguments_delta: toolCallDelta.function?.arguments ?? '',\n                    });\n                }\n                else {\n                    assertNever(toolCallSnapshot?.type);\n                }\n            }\n        }\n    }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (state.done_tool_calls.has(toolCallIndex)) {\n            // we've already fired the done event\n            return;\n        }\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n        if (!toolCallSnapshot) {\n            throw new Error('no tool call snapshot');\n        }\n        if (!toolCallSnapshot.type) {\n            throw new Error('tool call snapshot missing `type`');\n        }\n        if (toolCallSnapshot.type === 'function') {\n            const inputTool = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.tools?.find((tool) => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name);\n            this._emit('tool_calls.function.arguments.done', {\n                name: toolCallSnapshot.function.name,\n                index: toolCallIndex,\n                arguments: toolCallSnapshot.function.arguments,\n                parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments)\n                    : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments)\n                        : null,\n            });\n        }\n        else {\n            assertNever(toolCallSnapshot.type);\n        }\n    }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (choiceSnapshot.message.content && !state.content_done) {\n            state.content_done = true;\n            const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n            this._emit('content.done', {\n                content: choiceSnapshot.message.content,\n                parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null,\n            });\n        }\n        if (choiceSnapshot.message.refusal && !state.refusal_done) {\n            state.refusal_done = true;\n            this._emit('refusal.done', { refusal: choiceSnapshot.message.refusal });\n        }\n        if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n            state.logprobs_content_done = true;\n            this._emit('logprobs.content.done', { content: choiceSnapshot.logprobs.content });\n        }\n        if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n            state.logprobs_refusal_done = true;\n            this._emit('logprobs.refusal.done', { refusal: choiceSnapshot.logprobs.refusal });\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new OpenAIError(`request ended without sending any chunks`);\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n        return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\n    }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n        const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.response_format;\n        if (isAutoParsableResponseFormat(responseFormat)) {\n            return responseFormat;\n        }\n        return null;\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c, _d;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: [],\n            }, \"f\");\n        }\n        else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                }\n                else {\n                    const { content, refusal, ...rest } = logprobs;\n                    assertIsEmpty(rest);\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        (_a = choice.logprobs).content ?? (_a.content = []);\n                        choice.logprobs.content.push(...content);\n                    }\n                    if (refusal) {\n                        (_b = choice.logprobs).refusal ?? (_b.refusal = []);\n                        choice.logprobs.refusal.push(...refusal);\n                    }\n                }\n            }\n            if (finish_reason) {\n                choice.finish_reason = finish_reason;\n                if (__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && hasAutoParseableInput(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\n                    if (finish_reason === 'length') {\n                        throw new LengthFinishReasonError();\n                    }\n                    if (finish_reason === 'content_filter') {\n                        throw new ContentFilterFinishReasonError();\n                    }\n                }\n            }\n            Object.assign(choice, other);\n            if (!delta)\n                continue; // Shouldn't happen; just in case.\n            const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\n            assertIsEmpty(rest);\n            Object.assign(choice.message, rest);\n            if (refusal) {\n                choice.message.refusal = (choice.message.refusal || '') + refusal;\n            }\n            if (role)\n                choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                }\n                else {\n                    if (function_call.name)\n                        choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_c = choice.message.function_call).arguments ?? (_c.arguments = '');\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (content) {\n                choice.message.content = (choice.message.content || '') + content;\n                if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n                    choice.message.parsed = partialParse(choice.message.content);\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls)\n                    choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n                    const tool_call = ((_d = choice.message.tool_calls)[index] ?? (_d[index] = {}));\n                    Object.assign(tool_call, rest);\n                    if (id)\n                        tool_call.id = id;\n                    if (type)\n                        tool_call.type = type;\n                    if (fn)\n                        tool_call.function ?? (tool_call.function = { name: fn.name ?? '', arguments: '' });\n                    if (fn?.name)\n                        tool_call.function.name = fn.name;\n                    if (fn?.arguments) {\n                        tool_call.function.arguments += fn.arguments;\n                        if (shouldParseToolCall(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n                            tool_call.function.parsed_arguments = partialParse(tool_call.function.arguments);\n                        }\n                    }\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('chunk', (chunk) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(chunk);\n            }\n            else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot, params) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    const completion = {\n        ...rest,\n        id,\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {\n            if (!finish_reason) {\n                throw new OpenAIError(`missing finish_reason for choice ${index}`);\n            }\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role) {\n                throw new OpenAIError(`missing role for choice ${index}`);\n            }\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null) {\n                    throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n                }\n                if (!name) {\n                    throw new OpenAIError(`missing function_call.name for choice ${index}`);\n                }\n                return {\n                    ...choiceRest,\n                    message: {\n                        content,\n                        function_call: { arguments: args, name },\n                        role,\n                        refusal: message.refusal ?? null,\n                    },\n                    finish_reason,\n                    index,\n                    logprobs,\n                };\n            }\n            if (tool_calls) {\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        refusal: message.refusal ?? null,\n                        tool_calls: tool_calls.map((tool_call, i) => {\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            }\n                            if (type == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            }\n                            if (name == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            }\n                            if (args == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            }\n                            return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n                        }),\n                    },\n                };\n            }\n            return {\n                ...choiceRest,\n                message: { ...messageRest, content, role, refusal: message.refusal ?? null },\n                finish_reason,\n                index,\n                logprobs,\n            };\n        }),\n        created,\n        model,\n        object: 'chat.completion',\n        ...(system_fingerprint ? { system_fingerprint } : {}),\n    };\n    return maybeParseChatCompletion(completion, params);\n}\nfunction str(x) {\n    return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty(obj) {\n    return;\n}\nfunction assertNever(_x) { }\n//# sourceMappingURL=ChatCompletionStream.mjs.map","import { ChatCompletionStream } from \"./ChatCompletionStream.mjs\";\nexport class ChatCompletionStreamingRunner extends ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner(null);\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionStreamingRunner(\n        // @ts-expect-error TODO these types are incompatible\n        params);\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n        };\n        runner._run(() => runner._runTools(client, params, opts));\n        return runner;\n    }\n}\n//# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as MessagesAPI from \"./messages.mjs\";\nimport { Messages } from \"./messages.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nimport { ChatCompletionRunner } from \"../../../lib/ChatCompletionRunner.mjs\";\nimport { ChatCompletionStreamingRunner } from \"../../../lib/ChatCompletionStreamingRunner.mjs\";\nimport { ChatCompletionStream } from \"../../../lib/ChatCompletionStream.mjs\";\nimport { parseChatCompletion, validateInputTools } from \"../../../lib/parser.mjs\";\nexport class Completions extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.messages = new MessagesAPI.Messages(this._client);\n    }\n    create(body, options) {\n        return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false });\n    }\n    /**\n     * Get a stored chat completion. Only Chat Completions that have been created with\n     * the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * const chatCompletion =\n     *   await client.chat.completions.retrieve('completion_id');\n     * ```\n     */\n    retrieve(completionID, options) {\n        return this._client.get(path `/chat/completions/${completionID}`, options);\n    }\n    /**\n     * Modify a stored chat completion. Only Chat Completions that have been created\n     * with the `store` parameter set to `true` can be modified. Currently, the only\n     * supported modification is to update the `metadata` field.\n     *\n     * @example\n     * ```ts\n     * const chatCompletion = await client.chat.completions.update(\n     *   'completion_id',\n     *   { metadata: { foo: 'string' } },\n     * );\n     * ```\n     */\n    update(completionID, body, options) {\n        return this._client.post(path `/chat/completions/${completionID}`, { body, ...options });\n    }\n    /**\n     * List stored Chat Completions. Only Chat Completions that have been stored with\n     * the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const chatCompletion of client.chat.completions.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/chat/completions', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete a stored chat completion. Only Chat Completions that have been created\n     * with the `store` parameter set to `true` can be deleted.\n     *\n     * @example\n     * ```ts\n     * const chatCompletionDeleted =\n     *   await client.chat.completions.delete('completion_id');\n     * ```\n     */\n    delete(completionID, options) {\n        return this._client.delete(path `/chat/completions/${completionID}`, options);\n    }\n    parse(body, options) {\n        validateInputTools(body.tools);\n        return this._client.chat.completions\n            .create(body, {\n            ...options,\n            headers: {\n                ...options?.headers,\n                'X-Stainless-Helper-Method': 'chat.completions.parse',\n            },\n        })\n            ._thenUnwrap((completion) => parseChatCompletion(completion, body));\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return ChatCompletionStreamingRunner.runTools(this._client, body, options);\n        }\n        return ChatCompletionRunner.runTools(this._client, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */\n    stream(body, options) {\n        return ChatCompletionStream.createChatCompletion(this._client, body, options);\n    }\n}\nexport { ChatCompletionStreamingRunner } from \"../../../lib/ChatCompletionStreamingRunner.mjs\";\nexport { ParsingToolFunction, } from \"../../../lib/RunnableFunction.mjs\";\nexport { ChatCompletionStream } from \"../../../lib/ChatCompletionStream.mjs\";\nexport { ChatCompletionRunner } from \"../../../lib/ChatCompletionRunner.mjs\";\nCompletions.Messages = Messages;\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as CompletionsAPI from \"./completions/completions.mjs\";\nimport { Completions, } from \"./completions/completions.mjs\";\nexport class Chat extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.completions = new CompletionsAPI.Completions(this._client);\n    }\n}\nChat.Completions = Completions;\n//# sourceMappingURL=chat.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport { Completions, } from \"./completions.mjs\";\nexport * from \"./completions.mjs\";\nexport { Messages } from \"./messages.mjs\";\n//# sourceMappingURL=index.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport { Chat } from \"./chat.mjs\";\nexport { Completions, } from \"./completions/index.mjs\";\n//# sourceMappingURL=index.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst brand_privateNullableHeaders = Symbol('brand.privateNullableHeaders');\nconst isArray = Array.isArray;\nfunction* iterateHeaders(headers) {\n    if (!headers)\n        return;\n    if (brand_privateNullableHeaders in headers) {\n        const { values, nulls } = headers;\n        yield* values.entries();\n        for (const name of nulls) {\n            yield [name, null];\n        }\n        return;\n    }\n    let shouldClear = false;\n    let iter;\n    if (headers instanceof Headers) {\n        iter = headers.entries();\n    }\n    else if (isArray(headers)) {\n        iter = headers;\n    }\n    else {\n        shouldClear = true;\n        iter = Object.entries(headers ?? {});\n    }\n    for (let row of iter) {\n        const name = row[0];\n        if (typeof name !== 'string')\n            throw new TypeError('expected header name to be a string');\n        const values = isArray(row[1]) ? row[1] : [row[1]];\n        let didClear = false;\n        for (const value of values) {\n            if (value === undefined)\n                continue;\n            // Objects keys always overwrite older headers, they never append.\n            // Yield a null to clear the header before adding the new values.\n            if (shouldClear && !didClear) {\n                didClear = true;\n                yield [name, null];\n            }\n            yield [name, value];\n        }\n    }\n}\nexport const buildHeaders = (newHeaders) => {\n    const targetHeaders = new Headers();\n    const nullHeaders = new Set();\n    for (const headers of newHeaders) {\n        const seenHeaders = new Set();\n        for (const [name, value] of iterateHeaders(headers)) {\n            const lowerName = name.toLowerCase();\n            if (!seenHeaders.has(lowerName)) {\n                targetHeaders.delete(name);\n                seenHeaders.add(lowerName);\n            }\n            if (value === null) {\n                targetHeaders.delete(name);\n                nullHeaders.add(lowerName);\n            }\n            else {\n                targetHeaders.append(name, value);\n                nullHeaders.delete(lowerName);\n            }\n        }\n    }\n    return { [brand_privateNullableHeaders]: true, values: targetHeaders, nulls: nullHeaders };\n};\nexport const isEmptyHeaders = (headers) => {\n    for (const _ of iterateHeaders(headers))\n        return false;\n    return true;\n};\n//# sourceMappingURL=headers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nexport class Speech extends APIResource {\n    /**\n     * Generates audio from the input text.\n     *\n     * @example\n     * ```ts\n     * const speech = await client.audio.speech.create({\n     *   input: 'input',\n     *   model: 'string',\n     *   voice: 'ash',\n     * });\n     *\n     * const content = await speech.blob();\n     * console.log(content);\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/audio/speech', {\n            body,\n            ...options,\n            headers: buildHeaders([{ Accept: 'application/octet-stream' }, options?.headers]),\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=speech.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nexport class Transcriptions extends APIResource {\n    create(body, options) {\n        return this._client.post('/audio/transcriptions', multipartFormRequestOptions({\n            body,\n            ...options,\n            stream: body.stream ?? false,\n            __metadata: { model: body.model },\n        }, this._client));\n    }\n}\n//# sourceMappingURL=transcriptions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nexport class Translations extends APIResource {\n    create(body, options) {\n        return this._client.post('/audio/translations', multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }, this._client));\n    }\n}\n//# sourceMappingURL=translations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as SpeechAPI from \"./speech.mjs\";\nimport { Speech } from \"./speech.mjs\";\nimport * as TranscriptionsAPI from \"./transcriptions.mjs\";\nimport { Transcriptions, } from \"./transcriptions.mjs\";\nimport * as TranslationsAPI from \"./translations.mjs\";\nimport { Translations, } from \"./translations.mjs\";\nexport class Audio extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\n        this.translations = new TranslationsAPI.Translations(this._client);\n        this.speech = new SpeechAPI.Speech(this._client);\n    }\n}\nAudio.Transcriptions = Transcriptions;\nAudio.Translations = Translations;\nAudio.Speech = Speech;\n//# sourceMappingURL=audio.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { CursorPage } from \"../core/pagination.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Batches extends APIResource {\n    /**\n     * Creates and executes a batch from an uploaded file of requests\n     */\n    create(body, options) {\n        return this._client.post('/batches', { body, ...options });\n    }\n    /**\n     * Retrieves a batch.\n     */\n    retrieve(batchID, options) {\n        return this._client.get(path `/batches/${batchID}`, options);\n    }\n    /**\n     * List your organization's batches.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/batches', (CursorPage), { query, ...options });\n    }\n    /**\n     * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\n     * 10 minutes, before changing to `cancelled`, where it will have partial results\n     * (if any) available in the output file.\n     */\n    cancel(batchID, options) {\n        return this._client.post(path `/batches/${batchID}/cancel`, options);\n    }\n}\n//# sourceMappingURL=batches.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Assistants extends APIResource {\n    /**\n     * Create an assistant with a model and instructions.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.create({\n     *   model: 'gpt-4o',\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/assistants', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.retrieve(\n     *   'assistant_id',\n     * );\n     * ```\n     */\n    retrieve(assistantID, options) {\n        return this._client.get(path `/assistants/${assistantID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.update(\n     *   'assistant_id',\n     * );\n     * ```\n     */\n    update(assistantID, body, options) {\n        return this._client.post(path `/assistants/${assistantID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of assistants.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const assistant of client.beta.assistants.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/assistants', (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistantDeleted =\n     *   await client.beta.assistants.delete('assistant_id');\n     * ```\n     */\n    delete(assistantID, options) {\n        return this._client.delete(path `/assistants/${assistantID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=assistants.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nexport class Sessions extends APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API. Can be configured with the same session parameters as the\n     * `session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     *\n     * @example\n     * ```ts\n     * const session =\n     *   await client.beta.realtime.sessions.create();\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/realtime/sessions', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=sessions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nexport class TranscriptionSessions extends APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API specifically for realtime transcriptions. Can be configured with\n     * the same session parameters as the `transcription_session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     *\n     * @example\n     * ```ts\n     * const transcriptionSession =\n     *   await client.beta.realtime.transcriptionSessions.create();\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/realtime/transcription_sessions', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=transcription-sessions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as SessionsAPI from \"./sessions.mjs\";\nimport { Sessions, } from \"./sessions.mjs\";\nimport * as TranscriptionSessionsAPI from \"./transcription-sessions.mjs\";\nimport { TranscriptionSessions, } from \"./transcription-sessions.mjs\";\nexport class Realtime extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.sessions = new SessionsAPI.Sessions(this._client);\n        this.transcriptionSessions = new TranscriptionSessionsAPI.TranscriptionSessions(this._client);\n    }\n}\nRealtime.Sessions = Sessions;\nRealtime.TranscriptionSessions = TranscriptionSessions;\n//# sourceMappingURL=realtime.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Messages extends APIResource {\n    /**\n     * Create a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    create(threadID, body, options) {\n        return this._client.post(path `/threads/${threadID}/messages`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieve a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(messageID, params, options) {\n        const { thread_id } = params;\n        return this._client.get(path `/threads/${thread_id}/messages/${messageID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    update(messageID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(path `/threads/${thread_id}/messages/${messageID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of messages for a given thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    list(threadID, query = {}, options) {\n        return this._client.getAPIList(path `/threads/${threadID}/messages`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Deletes a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    delete(messageID, params, options) {\n        const { thread_id } = params;\n        return this._client.delete(path `/threads/${thread_id}/messages/${messageID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=messages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../../internal/headers.mjs\";\nimport { path } from \"../../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Steps extends APIResource {\n    /**\n     * Retrieves a run step.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(stepID, params, options) {\n        const { thread_id, run_id, ...query } = params;\n        return this._client.get(path `/threads/${thread_id}/runs/${run_id}/steps/${stepID}`, {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of run steps belonging to a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    list(runID, params, options) {\n        const { thread_id, ...query } = params;\n        return this._client.getAPIList(path `/threads/${thread_id}/runs/${runID}/steps`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=steps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { OpenAIError } from \"../../core/error.mjs\";\nimport { encodeUTF8 } from \"./bytes.mjs\";\nexport const toBase64 = (data) => {\n    if (!data)\n        return '';\n    if (typeof globalThis.Buffer !== 'undefined') {\n        return globalThis.Buffer.from(data).toString('base64');\n    }\n    if (typeof data === 'string') {\n        data = encodeUTF8(data);\n    }\n    if (typeof btoa !== 'undefined') {\n        return btoa(String.fromCharCode.apply(null, data));\n    }\n    throw new OpenAIError('Cannot generate base64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexport const fromBase64 = (str) => {\n    if (typeof globalThis.Buffer !== 'undefined') {\n        const buf = globalThis.Buffer.from(str, 'base64');\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    if (typeof atob !== 'undefined') {\n        const bstr = atob(str);\n        const buf = new Uint8Array(bstr.length);\n        for (let i = 0; i < bstr.length; i++) {\n            buf[i] = bstr.charCodeAt(i);\n        }\n        return buf;\n    }\n    throw new OpenAIError('Cannot decode base64 string; Expected `Buffer` or `atob` to be defined');\n};\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */\nexport const toFloat32Array = (base64Str) => {\n    if (typeof Buffer !== 'undefined') {\n        // for Node.js environment\n        const buf = Buffer.from(base64Str, 'base64');\n        return Array.from(new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT));\n    }\n    else {\n        // for legacy web platform APIs\n        const binaryStr = atob(base64Str);\n        const len = binaryStr.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binaryStr.charCodeAt(i);\n        }\n        return Array.from(new Float32Array(bytes.buffer));\n    }\n};\n//# sourceMappingURL=base64.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env) => {\n    if (typeof globalThis.process !== 'undefined') {\n        return globalThis.process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof globalThis.Deno !== 'undefined') {\n        return globalThis.Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\n//# sourceMappingURL=env.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport * from \"./utils/values.mjs\";\nexport * from \"./utils/base64.mjs\";\nexport * from \"./utils/env.mjs\";\nexport * from \"./utils/log.mjs\";\nexport * from \"./utils/uuid.mjs\";\nexport * from \"./utils/sleep.mjs\";\n//# sourceMappingURL=utils.mjs.map","var _AssistantStream_instances, _a, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { Stream } from \"../streaming.mjs\";\nimport { APIUserAbortError, OpenAIError } from \"../error.mjs\";\nimport { EventStream } from \"./EventStream.mjs\";\nimport { isObj } from \"../internal/utils.mjs\";\nexport class AssistantStream extends EventStream {\n    constructor() {\n        super(...arguments);\n        _AssistantStream_instances.add(this);\n        //Track all events in a single list for reference\n        _AssistantStream_events.set(this, []);\n        //Used to accumulate deltas\n        //We are accumulating many types so the value here is not strict\n        _AssistantStream_runStepSnapshots.set(this, {});\n        _AssistantStream_messageSnapshots.set(this, {});\n        _AssistantStream_messageSnapshot.set(this, void 0);\n        _AssistantStream_finalRun.set(this, void 0);\n        _AssistantStream_currentContentIndex.set(this, void 0);\n        _AssistantStream_currentContent.set(this, void 0);\n        _AssistantStream_currentToolCallIndex.set(this, void 0);\n        _AssistantStream_currentToolCall.set(this, void 0);\n        //For current snapshot methods\n        _AssistantStream_currentEvent.set(this, void 0);\n        _AssistantStream_currentRunSnapshot.set(this, void 0);\n        _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n    }\n    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        //Catch all for passing along all events\n        this.on('event', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    static fromReadableStream(stream) {\n        const runner = new _a();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        this._connected();\n        const stream = Stream.fromReadableStream(readableStream, this.controller);\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n    static createToolAssistantStream(runId, runs, params, options) {\n        const runner = new _a();\n        runner._run(() => runner._runToolAssistantStream(runId, runs, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    async _createToolAssistantStream(run, runId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await run.submitToolOutputs(runId, body, {\n            ...options,\n            signal: this.controller.signal,\n        });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static createThreadAssistantStream(params, thread, options) {\n        const runner = new _a();\n        runner._run(() => runner._threadAssistantStream(params, thread, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    static createAssistantStream(threadId, runs, params, options) {\n        const runner = new _a();\n        runner._run(() => runner._runAssistantStream(threadId, runs, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    currentEvent() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n    }\n    currentRun() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n    }\n    currentMessageSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n    }\n    currentRunStepSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n    }\n    async finalRunSteps() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n    }\n    async finalMessages() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n    }\n    async finalRun() {\n        await this.done();\n        if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\n            throw Error('Final run was not received.');\n        return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n    }\n    async _createThreadAssistantStream(thread, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    async _createAssistantStream(run, threadId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static accumulateDelta(acc, delta) {\n        for (const [key, deltaValue] of Object.entries(delta)) {\n            if (!acc.hasOwnProperty(key)) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            let accValue = acc[key];\n            if (accValue === null || accValue === undefined) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // We don't accumulate these special properties\n            if (key === 'index' || key === 'type') {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // Type-specific accumulation logic\n            if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n                accValue += deltaValue;\n            }\n            else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n                accValue += deltaValue;\n            }\n            else if (isObj(accValue) && isObj(deltaValue)) {\n                accValue = this.accumulateDelta(accValue, deltaValue);\n            }\n            else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n                if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {\n                    accValue.push(...deltaValue); // Use spread syntax for efficient addition\n                    continue;\n                }\n                for (const deltaEntry of deltaValue) {\n                    if (!isObj(deltaEntry)) {\n                        throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);\n                    }\n                    const index = deltaEntry['index'];\n                    if (index == null) {\n                        console.error(deltaEntry);\n                        throw new Error('Expected array delta entry to have an `index` property');\n                    }\n                    if (typeof index !== 'number') {\n                        throw new Error(`Expected array delta entry \\`index\\` property to be a number but got ${index}`);\n                    }\n                    const accEntry = accValue[index];\n                    if (accEntry == null) {\n                        accValue.push(deltaEntry);\n                    }\n                    else {\n                        accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n                    }\n                }\n                continue;\n            }\n            else {\n                throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n            }\n            acc[key] = accValue;\n        }\n        return acc;\n    }\n    _addRun(run) {\n        return run;\n    }\n    async _threadAssistantStream(params, thread, options) {\n        return await this._createThreadAssistantStream(thread, params, options);\n    }\n    async _runAssistantStream(threadId, runs, params, options) {\n        return await this._createAssistantStream(runs, threadId, params, options);\n    }\n    async _runToolAssistantStream(runId, runs, params, options) {\n        return await this._createToolAssistantStream(runs, runId, params, options);\n    }\n}\n_a = AssistantStream, _AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n    if (this.ended)\n        return;\n    __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n    switch (event.event) {\n        case 'thread.created':\n            //No action on this event.\n            break;\n        case 'thread.run.created':\n        case 'thread.run.queued':\n        case 'thread.run.in_progress':\n        case 'thread.run.requires_action':\n        case 'thread.run.completed':\n        case 'thread.run.incomplete':\n        case 'thread.run.failed':\n        case 'thread.run.cancelling':\n        case 'thread.run.cancelled':\n        case 'thread.run.expired':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n            break;\n        case 'thread.run.step.created':\n        case 'thread.run.step.in_progress':\n        case 'thread.run.step.delta':\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n            break;\n        case 'thread.message.created':\n        case 'thread.message.in_progress':\n        case 'thread.message.delta':\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n            break;\n        case 'error':\n            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n            throw new Error('Encountered an error event in event processing - errors should be processed earlier');\n        default:\n            assertNever(event);\n    }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n    if (this.ended) {\n        throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\n        throw Error('Final run has not been received');\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n    const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n    __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n    for (const content of newContent) {\n        const snapshotContent = accumulatedMessage.content[content.index];\n        if (snapshotContent?.type == 'text') {\n            this._emit('textCreated', snapshotContent.text);\n        }\n    }\n    switch (event.event) {\n        case 'thread.message.created':\n            this._emit('messageCreated', event.data);\n            break;\n        case 'thread.message.in_progress':\n            break;\n        case 'thread.message.delta':\n            this._emit('messageDelta', event.data.delta, accumulatedMessage);\n            if (event.data.delta.content) {\n                for (const content of event.data.delta.content) {\n                    //If it is text delta, emit a text delta event\n                    if (content.type == 'text' && content.text) {\n                        let textDelta = content.text;\n                        let snapshot = accumulatedMessage.content[content.index];\n                        if (snapshot && snapshot.type == 'text') {\n                            this._emit('textDelta', textDelta, snapshot.text);\n                        }\n                        else {\n                            throw Error('The snapshot associated with this text delta is not text or missing');\n                        }\n                    }\n                    if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n                        //See if we have in progress content\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n                            switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\n                                case 'text':\n                                    this._emit('textDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                                case 'image_file':\n                                    this._emit('imageFileDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                            }\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n                    }\n                    __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n                }\n            }\n            break;\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            //We emit the latest content we were working on on completion (including incomplete)\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n                const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n                if (currentContent) {\n                    switch (currentContent.type) {\n                        case 'image_file':\n                            this._emit('imageFileDone', currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                        case 'text':\n                            this._emit('textDone', currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                    }\n                }\n            }\n            if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n                this._emit('messageDone', event.data);\n            }\n            __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n    }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n    const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n    __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n    switch (event.event) {\n        case 'thread.run.step.created':\n            this._emit('runStepCreated', event.data);\n            break;\n        case 'thread.run.step.delta':\n            const delta = event.data.delta;\n            if (delta.step_details &&\n                delta.step_details.type == 'tool_calls' &&\n                delta.step_details.tool_calls &&\n                accumulatedRunStep.step_details.type == 'tool_calls') {\n                for (const toolCall of delta.step_details.tool_calls) {\n                    if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n                        this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n                    }\n                    else {\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                            this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"))\n                            this._emit('toolCallCreated', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    }\n                }\n            }\n            this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n            break;\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n            __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n            const details = event.data.step_details;\n            if (details.type == 'tool_calls') {\n                if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                    this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n                }\n            }\n            this._emit('runStepDone', event.data, accumulatedRunStep);\n            break;\n        case 'thread.run.step.in_progress':\n            break;\n    }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n    __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n    this._emit('event', event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n    switch (event.event) {\n        case 'thread.run.step.created':\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            return event.data;\n        case 'thread.run.step.delta':\n            let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n            if (!snapshot) {\n                throw Error('Received a RunStepDelta before creation of a snapshot');\n            }\n            let data = event.data;\n            if (data.delta) {\n                const accumulated = _a.accumulateDelta(snapshot, data.delta);\n                __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n            }\n            return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n        case 'thread.run.step.in_progress':\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            break;\n    }\n    if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id])\n        return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    throw new Error('No snapshot available');\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n    let newContent = [];\n    switch (event.event) {\n        case 'thread.message.created':\n            //On creation the snapshot is just the initial message\n            return [event.data, newContent];\n        case 'thread.message.delta':\n            if (!snapshot) {\n                throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\n            }\n            let data = event.data;\n            //If this delta does not have content, nothing to process\n            if (data.delta.content) {\n                for (const contentElement of data.delta.content) {\n                    if (contentElement.index in snapshot.content) {\n                        let currentContent = snapshot.content[contentElement.index];\n                        snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n                    }\n                    else {\n                        snapshot.content[contentElement.index] = contentElement;\n                        // This is a new element\n                        newContent.push(contentElement);\n                    }\n                }\n            }\n            return [snapshot, newContent];\n        case 'thread.message.in_progress':\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            //No changes on other thread events\n            if (snapshot) {\n                return [snapshot, newContent];\n            }\n            else {\n                throw Error('Received thread message event with no existing snapshot');\n            }\n    }\n    throw Error('Tried to accumulate a non-message event');\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n    return _a.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n    __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n    switch (event.event) {\n        case 'thread.run.created':\n            break;\n        case 'thread.run.queued':\n            break;\n        case 'thread.run.in_progress':\n            break;\n        case 'thread.run.requires_action':\n        case 'thread.run.cancelled':\n        case 'thread.run.failed':\n        case 'thread.run.completed':\n        case 'thread.run.expired':\n            __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n            }\n            break;\n        case 'thread.run.cancelling':\n            break;\n    }\n};\nfunction assertNever(_x) { }\n//# sourceMappingURL=AssistantStream.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../core/resource.mjs\";\nimport * as StepsAPI from \"./steps.mjs\";\nimport { Steps, } from \"./steps.mjs\";\nimport { CursorPage } from \"../../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../../internal/headers.mjs\";\nimport { AssistantStream } from \"../../../../lib/AssistantStream.mjs\";\nimport { sleep } from \"../../../../internal/utils/sleep.mjs\";\nimport { path } from \"../../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Runs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.steps = new StepsAPI.Steps(this._client);\n    }\n    create(threadID, params, options) {\n        const { include, ...body } = params;\n        return this._client.post(path `/threads/${threadID}/runs`, {\n            query: { include },\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n            stream: params.stream ?? false,\n        });\n    }\n    /**\n     * Retrieves a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(runID, params, options) {\n        const { thread_id } = params;\n        return this._client.get(path `/threads/${thread_id}/runs/${runID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    update(runID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(path `/threads/${thread_id}/runs/${runID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of runs belonging to a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    list(threadID, query = {}, options) {\n        return this._client.getAPIList(path `/threads/${threadID}/runs`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    cancel(runID, params, options) {\n        const { thread_id } = params;\n        return this._client.post(path `/threads/${thread_id}/runs/${runID}/cancel`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * A helper to create a run an poll for a terminal state. More information on Run\n     * lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async createAndPoll(threadId, body, options) {\n        const run = await this.create(threadId, body, options);\n        return await this.poll(run.id, { thread_id: threadId }, options);\n    }\n    /**\n     * Create a Run stream\n     *\n     * @deprecated use `stream` instead\n     */\n    createAndStream(threadId, body, options) {\n        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    /**\n     * A helper to poll a run status until it reaches a terminal state. More\n     * information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async poll(runId, params, options) {\n        const headers = buildHeaders([\n            options?.headers,\n            {\n                'X-Stainless-Poll-Helper': 'true',\n                'X-Stainless-Custom-Poll-Interval': options?.pollIntervalMs?.toString() ?? undefined,\n            },\n        ]);\n        while (true) {\n            const { data: run, response } = await this.retrieve(runId, params, {\n                ...options,\n                headers: { ...options?.headers, ...headers },\n            }).withResponse();\n            switch (run.status) {\n                //If we are in any sort of intermediate state we poll\n                case 'queued':\n                case 'in_progress':\n                case 'cancelling':\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    }\n                    else {\n                        const headerInterval = response.headers.get('openai-poll-after-ms');\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await sleep(sleepInterval);\n                    break;\n                //We return the run in any terminal state.\n                case 'requires_action':\n                case 'incomplete':\n                case 'cancelled':\n                case 'completed':\n                case 'failed':\n                case 'expired':\n                    return run;\n            }\n        }\n    }\n    /**\n     * Create a Run stream\n     */\n    stream(threadId, body, options) {\n        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    submitToolOutputs(runID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(path `/threads/${thread_id}/runs/${runID}/submit_tool_outputs`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n            stream: params.stream ?? false,\n        });\n    }\n    /**\n     * A helper to submit a tool output to a run and poll for a terminal run state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async submitToolOutputsAndPoll(runId, params, options) {\n        const run = await this.submitToolOutputs(runId, params, options);\n        return await this.poll(run.id, params, options);\n    }\n    /**\n     * Submit the tool outputs from a previous run and stream the run to a terminal\n     * state. More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    submitToolOutputsStream(runId, params, options) {\n        return AssistantStream.createToolAssistantStream(runId, this._client.beta.threads.runs, params, options);\n    }\n}\nRuns.Steps = Steps;\n//# sourceMappingURL=runs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as MessagesAPI from \"./messages.mjs\";\nimport { Messages, } from \"./messages.mjs\";\nimport * as RunsAPI from \"./runs/runs.mjs\";\nimport { Runs, } from \"./runs/runs.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { AssistantStream } from \"../../../lib/AssistantStream.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Threads extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.runs = new RunsAPI.Runs(this._client);\n        this.messages = new MessagesAPI.Messages(this._client);\n    }\n    /**\n     * Create a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    create(body = {}, options) {\n        return this._client.post('/threads', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(threadID, options) {\n        return this._client.get(path `/threads/${threadID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    update(threadID, body, options) {\n        return this._client.post(path `/threads/${threadID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    delete(threadID, options) {\n        return this._client.delete(path `/threads/${threadID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    createAndRun(body, options) {\n        return this._client.post('/threads/runs', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n            stream: body.stream ?? false,\n        });\n    }\n    /**\n     * A helper to create a thread, start a run and then poll for a terminal state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async createAndRunPoll(body, options) {\n        const run = await this.createAndRun(body, options);\n        return await this.runs.poll(run.id, { thread_id: run.thread_id }, options);\n    }\n    /**\n     * Create a thread and stream the run back\n     */\n    createAndRunStream(body, options) {\n        return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n    }\n}\nThreads.Runs = Runs;\nThreads.Messages = Messages;\n//# sourceMappingURL=threads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as AssistantsAPI from \"./assistants.mjs\";\nimport { Assistants, } from \"./assistants.mjs\";\nimport * as RealtimeAPI from \"./realtime/realtime.mjs\";\nimport { Realtime, } from \"./realtime/realtime.mjs\";\nimport * as ThreadsAPI from \"./threads/threads.mjs\";\nimport { Threads, } from \"./threads/threads.mjs\";\nexport class Beta extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.realtime = new RealtimeAPI.Realtime(this._client);\n        this.assistants = new AssistantsAPI.Assistants(this._client);\n        this.threads = new ThreadsAPI.Threads(this._client);\n    }\n}\nBeta.Realtime = Realtime;\nBeta.Assistants = Assistants;\nBeta.Threads = Threads;\n//# sourceMappingURL=beta.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nexport class Completions extends APIResource {\n    create(body, options) {\n        return this._client.post('/completions', { body, ...options, stream: body.stream ?? false });\n    }\n}\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Content extends APIResource {\n    /**\n     * Retrieve Container File Content\n     */\n    retrieve(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.get(path `/containers/${container_id}/files/${fileID}/content`, {\n            ...options,\n            headers: buildHeaders([{ Accept: 'application/binary' }, options?.headers]),\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=content.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as ContentAPI from \"./content.mjs\";\nimport { Content } from \"./content.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { multipartFormRequestOptions } from \"../../../internal/uploads.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.content = new ContentAPI.Content(this._client);\n    }\n    /**\n     * Create a Container File\n     *\n     * You can send either a multipart/form-data request with the raw file content, or\n     * a JSON request with a file ID.\n     */\n    create(containerID, body, options) {\n        return this._client.post(path `/containers/${containerID}/files`, multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Retrieve Container File\n     */\n    retrieve(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.get(path `/containers/${container_id}/files/${fileID}`, options);\n    }\n    /**\n     * List Container files\n     */\n    list(containerID, query = {}, options) {\n        return this._client.getAPIList(path `/containers/${containerID}/files`, (CursorPage), {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete Container File\n     */\n    delete(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.delete(path `/containers/${container_id}/files/${fileID}`, {\n            ...options,\n            headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),\n        });\n    }\n}\nFiles.Content = Content;\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as FilesAPI from \"./files/files.mjs\";\nimport { Files, } from \"./files/files.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Containers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.files = new FilesAPI.Files(this._client);\n    }\n    /**\n     * Create Container\n     */\n    create(body, options) {\n        return this._client.post('/containers', { body, ...options });\n    }\n    /**\n     * Retrieve Container\n     */\n    retrieve(containerID, options) {\n        return this._client.get(path `/containers/${containerID}`, options);\n    }\n    /**\n     * List Containers\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/containers', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete Container\n     */\n    delete(containerID, options) {\n        return this._client.delete(path `/containers/${containerID}`, {\n            ...options,\n            headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),\n        });\n    }\n}\nContainers.Files = Files;\n//# sourceMappingURL=containers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { loggerFor, toFloat32Array } from \"../internal/utils.mjs\";\nexport class Embeddings extends APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     *\n     * @example\n     * ```ts\n     * const createEmbeddingResponse =\n     *   await client.embeddings.create({\n     *     input: 'The quick brown fox jumped over the lazy dog',\n     *     model: 'text-embedding-3-small',\n     *   });\n     * ```\n     */\n    create(body, options) {\n        const hasUserProvidedEncodingFormat = !!body.encoding_format;\n        // No encoding_format specified, defaulting to base64 for performance reasons\n        // See https://github.com/openai/openai-node/pull/1312\n        let encoding_format = hasUserProvidedEncodingFormat ? body.encoding_format : 'base64';\n        if (hasUserProvidedEncodingFormat) {\n            loggerFor(this._client).debug('embeddings/user defined encoding_format:', body.encoding_format);\n        }\n        const response = this._client.post('/embeddings', {\n            body: {\n                ...body,\n                encoding_format: encoding_format,\n            },\n            ...options,\n        });\n        // if the user specified an encoding_format, return the response as-is\n        if (hasUserProvidedEncodingFormat) {\n            return response;\n        }\n        // in this stage, we are sure the user did not specify an encoding_format\n        // and we defaulted to base64 for performance reasons\n        // we are sure then that the response is base64 encoded, let's decode it\n        // the returned result will be a float32 array since this is OpenAI API's default encoding\n        loggerFor(this._client).debug('embeddings/decoding base64 embeddings from base64');\n        return response._thenUnwrap((response) => {\n            if (response && response.data) {\n                response.data.forEach((embeddingBase64Obj) => {\n                    const embeddingBase64Str = embeddingBase64Obj.embedding;\n                    embeddingBase64Obj.embedding = toFloat32Array(embeddingBase64Str);\n                });\n            }\n            return response;\n        });\n    }\n}\n//# sourceMappingURL=embeddings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class OutputItems extends APIResource {\n    /**\n     * Get an evaluation run output item by ID.\n     */\n    retrieve(outputItemID, params, options) {\n        const { eval_id, run_id } = params;\n        return this._client.get(path `/evals/${eval_id}/runs/${run_id}/output_items/${outputItemID}`, options);\n    }\n    /**\n     * Get a list of output items for an evaluation run.\n     */\n    list(runID, params, options) {\n        const { eval_id, ...query } = params;\n        return this._client.getAPIList(path `/evals/${eval_id}/runs/${runID}/output_items`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=output-items.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as OutputItemsAPI from \"./output-items.mjs\";\nimport { OutputItems, } from \"./output-items.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Runs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.outputItems = new OutputItemsAPI.OutputItems(this._client);\n    }\n    /**\n     * Kicks off a new run for a given evaluation, specifying the data source, and what\n     * model configuration to use to test. The datasource will be validated against the\n     * schema specified in the config of the evaluation.\n     */\n    create(evalID, body, options) {\n        return this._client.post(path `/evals/${evalID}/runs`, { body, ...options });\n    }\n    /**\n     * Get an evaluation run by ID.\n     */\n    retrieve(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.get(path `/evals/${eval_id}/runs/${runID}`, options);\n    }\n    /**\n     * Get a list of runs for an evaluation.\n     */\n    list(evalID, query = {}, options) {\n        return this._client.getAPIList(path `/evals/${evalID}/runs`, (CursorPage), {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete an eval run.\n     */\n    delete(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.delete(path `/evals/${eval_id}/runs/${runID}`, options);\n    }\n    /**\n     * Cancel an ongoing evaluation run.\n     */\n    cancel(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.post(path `/evals/${eval_id}/runs/${runID}`, options);\n    }\n}\nRuns.OutputItems = OutputItems;\n//# sourceMappingURL=runs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as RunsAPI from \"./runs/runs.mjs\";\nimport { Runs, } from \"./runs/runs.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Evals extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.runs = new RunsAPI.Runs(this._client);\n    }\n    /**\n     * Create the structure of an evaluation that can be used to test a model's\n     * performance. An evaluation is a set of testing criteria and the config for a\n     * data source, which dictates the schema of the data used in the evaluation. After\n     * creating an evaluation, you can run it on different models and model parameters.\n     * We support several types of graders and datasources. For more information, see\n     * the [Evals guide](https://platform.openai.com/docs/guides/evals).\n     */\n    create(body, options) {\n        return this._client.post('/evals', { body, ...options });\n    }\n    /**\n     * Get an evaluation by ID.\n     */\n    retrieve(evalID, options) {\n        return this._client.get(path `/evals/${evalID}`, options);\n    }\n    /**\n     * Update certain properties of an evaluation.\n     */\n    update(evalID, body, options) {\n        return this._client.post(path `/evals/${evalID}`, { body, ...options });\n    }\n    /**\n     * List evaluations for a project.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/evals', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete an evaluation.\n     */\n    delete(evalID, options) {\n        return this._client.delete(path `/evals/${evalID}`, options);\n    }\n}\nEvals.Runs = Runs;\n//# sourceMappingURL=evals.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { CursorPage } from \"../core/pagination.mjs\";\nimport { buildHeaders } from \"../internal/headers.mjs\";\nimport { sleep } from \"../internal/utils/sleep.mjs\";\nimport { APIConnectionTimeoutError } from \"../error.mjs\";\nimport { multipartFormRequestOptions } from \"../internal/uploads.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n    /**\n     * Upload a file that can be used across various endpoints. Individual files can be\n     * up to 512 MB, and the size of all files uploaded by one organization can be up\n     * to 100 GB.\n     *\n     * The Assistants API supports files up to 2 million tokens and of specific file\n     * types. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n     * details.\n     *\n     * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n     * required formats for fine-tuning\n     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n     * models.\n     *\n     * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n     * has a specific required\n     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */\n    create(body, options) {\n        return this._client.post('/files', multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Returns information about a specific file.\n     */\n    retrieve(fileID, options) {\n        return this._client.get(path `/files/${fileID}`, options);\n    }\n    /**\n     * Returns a list of files.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/files', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete a file.\n     */\n    delete(fileID, options) {\n        return this._client.delete(path `/files/${fileID}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */\n    content(fileID, options) {\n        return this._client.get(path `/files/${fileID}/content`, {\n            ...options,\n            headers: buildHeaders([{ Accept: 'application/binary' }, options?.headers]),\n            __binaryResponse: true,\n        });\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */\n    async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\n        const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while (!file.status || !TERMINAL_STATES.has(file.status)) {\n            await sleep(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new APIConnectionTimeoutError({\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n                });\n            }\n        }\n        return file;\n    }\n}\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nexport class Methods extends APIResource {\n}\n//# sourceMappingURL=methods.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nexport class Graders extends APIResource {\n    /**\n     * Run a grader.\n     *\n     * @example\n     * ```ts\n     * const response = await client.fineTuning.alpha.graders.run({\n     *   grader: {\n     *     input: 'input',\n     *     name: 'name',\n     *     operation: 'eq',\n     *     reference: 'reference',\n     *     type: 'string_check',\n     *   },\n     *   model_sample: 'model_sample',\n     * });\n     * ```\n     */\n    run(body, options) {\n        return this._client.post('/fine_tuning/alpha/graders/run', { body, ...options });\n    }\n    /**\n     * Validate a grader.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.fineTuning.alpha.graders.validate({\n     *     grader: {\n     *       input: 'input',\n     *       name: 'name',\n     *       operation: 'eq',\n     *       reference: 'reference',\n     *       type: 'string_check',\n     *     },\n     *   });\n     * ```\n     */\n    validate(body, options) {\n        return this._client.post('/fine_tuning/alpha/graders/validate', { body, ...options });\n    }\n}\n//# sourceMappingURL=graders.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as GradersAPI from \"./graders.mjs\";\nimport { Graders, } from \"./graders.mjs\";\nexport class Alpha extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.graders = new GradersAPI.Graders(this._client);\n    }\n}\nAlpha.Graders = Graders;\n//# sourceMappingURL=alpha.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { Page } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Permissions extends APIResource {\n    /**\n     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * This enables organization owners to share fine-tuned models with other projects\n     * in their organization.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const permissionCreateResponse of client.fineTuning.checkpoints.permissions.create(\n     *   'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n     *   { project_ids: ['string'] },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(fineTunedModelCheckpoint, body, options) {\n        return this._client.getAPIList(path `/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, (Page), { body, method: 'post', ...options });\n    }\n    /**\n     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * Organization owners can use this endpoint to view all permissions for a\n     * fine-tuned model checkpoint.\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.fineTuning.checkpoints.permissions.retrieve(\n     *     'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     *   );\n     * ```\n     */\n    retrieve(fineTunedModelCheckpoint, query = {}, options) {\n        return this._client.get(path `/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * Organization owners can use this endpoint to delete a permission for a\n     * fine-tuned model checkpoint.\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.fineTuning.checkpoints.permissions.delete(\n     *     'cp_zc4Q7MP6XxulcVzj4MZdwsAB',\n     *     {\n     *       fine_tuned_model_checkpoint:\n     *         'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n     *     },\n     *   );\n     * ```\n     */\n    delete(permissionID, params, options) {\n        const { fine_tuned_model_checkpoint } = params;\n        return this._client.delete(path `/fine_tuning/checkpoints/${fine_tuned_model_checkpoint}/permissions/${permissionID}`, options);\n    }\n}\n//# sourceMappingURL=permissions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as PermissionsAPI from \"./permissions.mjs\";\nimport { Permissions, } from \"./permissions.mjs\";\nexport class Checkpoints extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.permissions = new PermissionsAPI.Permissions(this._client);\n    }\n}\nCheckpoints.Permissions = Permissions;\n//# sourceMappingURL=checkpoints.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Checkpoints extends APIResource {\n    /**\n     * List checkpoints for a fine-tuning job.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJobCheckpoint of client.fineTuning.jobs.checkpoints.list(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(fineTuningJobID, query = {}, options) {\n        return this._client.getAPIList(path `/fine_tuning/jobs/${fineTuningJobID}/checkpoints`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=checkpoints.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as CheckpointsAPI from \"./checkpoints.mjs\";\nimport { Checkpoints, } from \"./checkpoints.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Jobs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.checkpoints = new CheckpointsAPI.Checkpoints(this._client);\n    }\n    /**\n     * Creates a fine-tuning job which begins the process of creating a new model from\n     * a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.create({\n     *   model: 'gpt-4o-mini',\n     *   training_file: 'file-abc123',\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/fine_tuning/jobs', { body, ...options });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.retrieve(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    retrieve(fineTuningJobID, options) {\n        return this._client.get(path `/fine_tuning/jobs/${fineTuningJobID}`, options);\n    }\n    /**\n     * List your organization's fine-tuning jobs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJob of client.fineTuning.jobs.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/fine_tuning/jobs', (CursorPage), { query, ...options });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.cancel(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    cancel(fineTuningJobID, options) {\n        return this._client.post(path `/fine_tuning/jobs/${fineTuningJobID}/cancel`, options);\n    }\n    /**\n     * Get status updates for a fine-tuning job.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJobEvent of client.fineTuning.jobs.listEvents(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    listEvents(fineTuningJobID, query = {}, options) {\n        return this._client.getAPIList(path `/fine_tuning/jobs/${fineTuningJobID}/events`, (CursorPage), { query, ...options });\n    }\n    /**\n     * Pause a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.pause(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    pause(fineTuningJobID, options) {\n        return this._client.post(path `/fine_tuning/jobs/${fineTuningJobID}/pause`, options);\n    }\n    /**\n     * Resume a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.resume(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    resume(fineTuningJobID, options) {\n        return this._client.post(path `/fine_tuning/jobs/${fineTuningJobID}/resume`, options);\n    }\n}\nJobs.Checkpoints = Checkpoints;\n//# sourceMappingURL=jobs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as MethodsAPI from \"./methods.mjs\";\nimport { Methods, } from \"./methods.mjs\";\nimport * as AlphaAPI from \"./alpha/alpha.mjs\";\nimport { Alpha } from \"./alpha/alpha.mjs\";\nimport * as CheckpointsAPI from \"./checkpoints/checkpoints.mjs\";\nimport { Checkpoints } from \"./checkpoints/checkpoints.mjs\";\nimport * as JobsAPI from \"./jobs/jobs.mjs\";\nimport { Jobs, } from \"./jobs/jobs.mjs\";\nexport class FineTuning extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.methods = new MethodsAPI.Methods(this._client);\n        this.jobs = new JobsAPI.Jobs(this._client);\n        this.checkpoints = new CheckpointsAPI.Checkpoints(this._client);\n        this.alpha = new AlphaAPI.Alpha(this._client);\n    }\n}\nFineTuning.Methods = Methods;\nFineTuning.Jobs = Jobs;\nFineTuning.Checkpoints = Checkpoints;\nFineTuning.Alpha = Alpha;\n//# sourceMappingURL=fine-tuning.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nexport class GraderModels extends APIResource {\n}\n//# sourceMappingURL=grader-models.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as GraderModelsAPI from \"./grader-models.mjs\";\nimport { GraderModels, } from \"./grader-models.mjs\";\nexport class Graders extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.graderModels = new GraderModelsAPI.GraderModels(this._client);\n    }\n}\nGraders.GraderModels = GraderModels;\n//# sourceMappingURL=graders.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../internal/uploads.mjs\";\nexport class Images extends APIResource {\n    /**\n     * Creates a variation of a given image. This endpoint only supports `dall-e-2`.\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.createVariation({\n     *   image: fs.createReadStream('otter.png'),\n     * });\n     * ```\n     */\n    createVariation(body, options) {\n        return this._client.post('/images/variations', multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Creates an edited or extended image given one or more source images and a\n     * prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.edit({\n     *   image: fs.createReadStream('path/to/file'),\n     *   prompt: 'A cute baby sea otter wearing a beret',\n     * });\n     * ```\n     */\n    edit(body, options) {\n        return this._client.post('/images/edits', multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Creates an image given a prompt.\n     * [Learn more](https://platform.openai.com/docs/guides/images).\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.generate({\n     *   prompt: 'A cute baby sea otter',\n     * });\n     * ```\n     */\n    generate(body, options) {\n        return this._client.post('/images/generations', { body, ...options });\n    }\n}\n//# sourceMappingURL=images.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { Page } from \"../core/pagination.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Models extends APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */\n    retrieve(model, options) {\n        return this._client.get(path `/models/${model}`, options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */\n    list(options) {\n        return this._client.getAPIList('/models', (Page), options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */\n    delete(model, options) {\n        return this._client.delete(path `/models/${model}`, options);\n    }\n}\n//# sourceMappingURL=models.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nexport class Moderations extends APIResource {\n    /**\n     * Classifies if text and/or image inputs are potentially harmful. Learn more in\n     * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n     */\n    create(body, options) {\n        return this._client.post('/moderations', { body, ...options });\n    }\n}\n//# sourceMappingURL=moderations.mjs.map","import { OpenAIError } from \"../error.mjs\";\nimport { isAutoParsableResponseFormat } from \"../lib/parser.mjs\";\nexport function maybeParseResponse(response, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...response,\n            output_parsed: null,\n            output: response.output.map((item) => {\n                if (item.type === 'function_call') {\n                    return {\n                        ...item,\n                        parsed_arguments: null,\n                    };\n                }\n                if (item.type === 'message') {\n                    return {\n                        ...item,\n                        content: item.content.map((content) => ({\n                            ...content,\n                            parsed: null,\n                        })),\n                    };\n                }\n                else {\n                    return item;\n                }\n            }),\n        };\n    }\n    return parseResponse(response, params);\n}\nexport function parseResponse(response, params) {\n    const output = response.output.map((item) => {\n        if (item.type === 'function_call') {\n            return {\n                ...item,\n                parsed_arguments: parseToolCall(params, item),\n            };\n        }\n        if (item.type === 'message') {\n            const content = item.content.map((content) => {\n                if (content.type === 'output_text') {\n                    return {\n                        ...content,\n                        parsed: parseTextFormat(params, content.text),\n                    };\n                }\n                return content;\n            });\n            return {\n                ...item,\n                content,\n            };\n        }\n        return item;\n    });\n    const parsed = Object.assign({}, response, { output });\n    if (!Object.getOwnPropertyDescriptor(response, 'output_text')) {\n        addOutputText(parsed);\n    }\n    Object.defineProperty(parsed, 'output_parsed', {\n        enumerable: true,\n        get() {\n            for (const output of parsed.output) {\n                if (output.type !== 'message') {\n                    continue;\n                }\n                for (const content of output.content) {\n                    if (content.type === 'output_text' && content.parsed !== null) {\n                        return content.parsed;\n                    }\n                }\n            }\n            return null;\n        },\n    });\n    return parsed;\n}\nfunction parseTextFormat(params, content) {\n    if (params.text?.format?.type !== 'json_schema') {\n        return null;\n    }\n    if ('$parseRaw' in params.text?.format) {\n        const text_format = params.text?.format;\n        return text_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n}\nexport function hasAutoParseableInput(params) {\n    if (isAutoParsableResponseFormat(params.text?.format)) {\n        return true;\n    }\n    return false;\n}\nexport function makeParseableResponseTool(tool, { parser, callback, }) {\n    const obj = { ...tool };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-tool',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n        $callback: {\n            value: callback,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function isAutoParsableTool(tool) {\n    return tool?.['$brand'] === 'auto-parseable-tool';\n}\nfunction getInputToolByName(input_tools, name) {\n    return input_tools.find((tool) => tool.type === 'function' && tool.name === name);\n}\nfunction parseToolCall(params, toolCall) {\n    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n    return {\n        ...toolCall,\n        ...toolCall,\n        parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments)\n            : inputTool?.strict ? JSON.parse(toolCall.arguments)\n                : null,\n    };\n}\nexport function shouldParseToolCall(params, toolCall) {\n    if (!params) {\n        return false;\n    }\n    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n    return isAutoParsableTool(inputTool) || inputTool?.strict || false;\n}\nexport function validateInputTools(tools) {\n    for (const tool of tools ?? []) {\n        if (tool.type !== 'function') {\n            throw new OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n        }\n        if (tool.function.strict !== true) {\n            throw new OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n        }\n    }\n}\nexport function addOutputText(rsp) {\n    const texts = [];\n    for (const output of rsp.output) {\n        if (output.type !== 'message') {\n            continue;\n        }\n        for (const content of output.content) {\n            if (content.type === 'output_text') {\n                texts.push(content.text);\n            }\n        }\n    }\n    rsp.output_text = texts.join('');\n}\n//# sourceMappingURL=ResponsesParser.mjs.map","var _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../../internal/tslib.mjs\";\nimport { APIUserAbortError, OpenAIError } from \"../../error.mjs\";\nimport { EventStream } from \"../EventStream.mjs\";\nimport { maybeParseResponse } from \"../ResponsesParser.mjs\";\nexport class ResponseStream extends EventStream {\n    constructor(params) {\n        super();\n        _ResponseStream_instances.add(this);\n        _ResponseStream_params.set(this, void 0);\n        _ResponseStream_currentResponseSnapshot.set(this, void 0);\n        _ResponseStream_finalResponse.set(this, void 0);\n        __classPrivateFieldSet(this, _ResponseStream_params, params, \"f\");\n    }\n    static createResponse(client, params, options) {\n        const runner = new ResponseStream(params);\n        runner._run(() => runner._createOrRetrieveResponse(client, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    async _createOrRetrieveResponse(client, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_beginRequest).call(this);\n        let stream;\n        let starting_after = null;\n        if ('response_id' in params) {\n            stream = await client.responses.retrieve(params.response_id, { stream: true }, { ...options, signal: this.controller.signal, stream: true });\n            starting_after = params.starting_after ?? null;\n        }\n        else {\n            stream = await client.responses.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\n        }\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_addEvent).call(this, event, starting_after);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_endRequest).call(this);\n    }\n    [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {\n        if (this.ended)\n            return;\n        __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n    }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event, starting_after) {\n        if (this.ended)\n            return;\n        const maybeEmit = (name, event) => {\n            if (starting_after == null || event.sequence_number > starting_after) {\n                this._emit(name, event);\n            }\n        };\n        const response = __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_accumulateResponse).call(this, event);\n        maybeEmit('event', event);\n        switch (event.type) {\n            case 'response.output_text.delta': {\n                const output = response.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'message') {\n                    const content = output.content[event.content_index];\n                    if (!content) {\n                        throw new OpenAIError(`missing content at index ${event.content_index}`);\n                    }\n                    if (content.type !== 'output_text') {\n                        throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n                    }\n                    maybeEmit('response.output_text.delta', {\n                        ...event,\n                        snapshot: content.text,\n                    });\n                }\n                break;\n            }\n            case 'response.function_call_arguments.delta': {\n                const output = response.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'function_call') {\n                    maybeEmit('response.function_call_arguments.delta', {\n                        ...event,\n                        snapshot: output.arguments,\n                    });\n                }\n                break;\n            }\n            default:\n                maybeEmit(event.type, event);\n                break;\n        }\n    }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {\n        if (this.ended) {\n            throw new OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n        if (!snapshot) {\n            throw new OpenAIError(`request ended without sending any events`);\n        }\n        __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n        const parsedResponse = finalizeResponse(snapshot, __classPrivateFieldGet(this, _ResponseStream_params, \"f\"));\n        __classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, \"f\");\n        return parsedResponse;\n    }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {\n        let snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n        if (!snapshot) {\n            if (event.type !== 'response.created') {\n                throw new OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);\n            }\n            snapshot = __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n            return snapshot;\n        }\n        switch (event.type) {\n            case 'response.output_item.added': {\n                snapshot.output.push(event.item);\n                break;\n            }\n            case 'response.content_part.added': {\n                const output = snapshot.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'message') {\n                    output.content.push(event.part);\n                }\n                break;\n            }\n            case 'response.output_text.delta': {\n                const output = snapshot.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'message') {\n                    const content = output.content[event.content_index];\n                    if (!content) {\n                        throw new OpenAIError(`missing content at index ${event.content_index}`);\n                    }\n                    if (content.type !== 'output_text') {\n                        throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n                    }\n                    content.text += event.delta;\n                }\n                break;\n            }\n            case 'response.function_call_arguments.delta': {\n                const output = snapshot.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'function_call') {\n                    output.arguments += event.delta;\n                }\n                break;\n            }\n            case 'response.completed': {\n                __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n                break;\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('event', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((event) => (event ? { value: event, done: false } : { value: undefined, done: true }));\n                }\n                const event = pushQueue.shift();\n                return { value: event, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    /**\n     * @returns a promise that resolves with the final Response, or rejects\n     * if an error occurred or the stream ended prematurely without producing a REsponse.\n     */\n    async finalResponse() {\n        await this.done();\n        const response = __classPrivateFieldGet(this, _ResponseStream_finalResponse, \"f\");\n        if (!response)\n            throw new OpenAIError('stream ended without producing a ChatCompletion');\n        return response;\n    }\n}\nfunction finalizeResponse(snapshot, params) {\n    return maybeParseResponse(snapshot, params);\n}\n//# sourceMappingURL=ResponseStream.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class InputItems extends APIResource {\n    /**\n     * Returns a list of input items for a given response.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const responseItem of client.responses.inputItems.list(\n     *   'response_id',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(responseID, query = {}, options) {\n        return this._client.getAPIList(path `/responses/${responseID}/input_items`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=input-items.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { parseResponse, addOutputText, } from \"../../lib/ResponsesParser.mjs\";\nimport { ResponseStream } from \"../../lib/responses/ResponseStream.mjs\";\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as InputItemsAPI from \"./input-items.mjs\";\nimport { InputItems } from \"./input-items.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Responses extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.inputItems = new InputItemsAPI.InputItems(this._client);\n    }\n    create(body, options) {\n        return this._client.post('/responses', { body, ...options, stream: body.stream ?? false })._thenUnwrap((rsp) => {\n            if ('object' in rsp && rsp.object === 'response') {\n                addOutputText(rsp);\n            }\n            return rsp;\n        });\n    }\n    retrieve(responseID, query = {}, options) {\n        return this._client.get(path `/responses/${responseID}`, {\n            query,\n            ...options,\n            stream: query?.stream ?? false,\n        });\n    }\n    /**\n     * Deletes a model response with the given ID.\n     *\n     * @example\n     * ```ts\n     * await client.responses.delete(\n     *   'resp_677efb5139a88190b512bc3fef8e535d',\n     * );\n     * ```\n     */\n    delete(responseID, options) {\n        return this._client.delete(path `/responses/${responseID}`, {\n            ...options,\n            headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),\n        });\n    }\n    parse(body, options) {\n        return this._client.responses\n            .create(body, options)\n            ._thenUnwrap((response) => parseResponse(response, body));\n    }\n    /**\n     * Creates a model response stream\n     */\n    stream(body, options) {\n        return ResponseStream.createResponse(this._client, body, options);\n    }\n    /**\n     * Cancels a model response with the given ID. Only responses created with the\n     * `background` parameter set to `true` can be cancelled.\n     * [Learn more](https://platform.openai.com/docs/guides/background).\n     *\n     * @example\n     * ```ts\n     * const response = await client.responses.cancel(\n     *   'resp_677efb5139a88190b512bc3fef8e535d',\n     * );\n     * ```\n     */\n    cancel(responseID, options) {\n        return this._client.post(path `/responses/${responseID}/cancel`, options);\n    }\n}\nResponses.InputItems = InputItems;\n//# sourceMappingURL=responses.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Parts extends APIResource {\n    /**\n     * Adds a\n     * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n     * A Part represents a chunk of bytes from the file you are trying to upload.\n     *\n     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n     * maximum of 8 GB.\n     *\n     * It is possible to add multiple Parts in parallel. You can decide the intended\n     * order of the Parts when you\n     * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n     */\n    create(uploadID, body, options) {\n        return this._client.post(path `/uploads/${uploadID}/parts`, multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n}\n//# sourceMappingURL=parts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as PartsAPI from \"./parts.mjs\";\nimport { Parts } from \"./parts.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Uploads extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.parts = new PartsAPI.Parts(this._client);\n    }\n    /**\n     * Creates an intermediate\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n     * that you can add\n     * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n     * Currently, an Upload can accept at most 8 GB in total and expires after an hour\n     * after you create it.\n     *\n     * Once you complete the Upload, we will create a\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * contains all the parts you uploaded. This File is usable in the rest of our\n     * platform as a regular File object.\n     *\n     * For certain `purpose` values, the correct `mime_type` must be specified. Please\n     * refer to documentation for the\n     * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n     *\n     * For guidance on the proper filename extensions for each purpose, please follow\n     * the documentation on\n     * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n     */\n    create(body, options) {\n        return this._client.post('/uploads', { body, ...options });\n    }\n    /**\n     * Cancels the Upload. No Parts may be added after an Upload is cancelled.\n     */\n    cancel(uploadID, options) {\n        return this._client.post(path `/uploads/${uploadID}/cancel`, options);\n    }\n    /**\n     * Completes the\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n     *\n     * Within the returned Upload object, there is a nested\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * is ready to use in the rest of the platform.\n     *\n     * You can specify the order of the Parts by passing in an ordered list of the Part\n     * IDs.\n     *\n     * The number of bytes uploaded upon completion must match the number of bytes\n     * initially specified when creating the Upload object. No Parts may be added after\n     * an Upload is completed.\n     */\n    complete(uploadID, body, options) {\n        return this._client.post(path `/uploads/${uploadID}/complete`, { body, ...options });\n    }\n}\nUploads.Parts = Parts;\n//# sourceMappingURL=uploads.mjs.map","/**\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\n */\nexport const allSettledWithThrow = async (promises) => {\n    const results = await Promise.allSettled(promises);\n    const rejected = results.filter((result) => result.status === 'rejected');\n    if (rejected.length) {\n        for (const result of rejected) {\n            console.error(result.reason);\n        }\n        throw new Error(`${rejected.length} promise(s) failed - see the above errors`);\n    }\n    // Note: TS was complaining about using `.filter().map()` here for some reason\n    const values = [];\n    for (const result of results) {\n        if (result.status === 'fulfilled') {\n            values.push(result.value);\n        }\n    }\n    return values;\n};\n//# sourceMappingURL=Util.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { sleep } from \"../../internal/utils/sleep.mjs\";\nimport { allSettledWithThrow } from \"../../lib/Util.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class FileBatches extends APIResource {\n    /**\n     * Create a vector store file batch.\n     */\n    create(vectorStoreID, body, options) {\n        return this._client.post(path `/vector_stores/${vectorStoreID}/file_batches`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a vector store file batch.\n     */\n    retrieve(batchID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.get(path `/vector_stores/${vector_store_id}/file_batches/${batchID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Cancel a vector store file batch. This attempts to cancel the processing of\n     * files in this batch as soon as possible.\n     */\n    cancel(batchID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.post(path `/vector_stores/${vector_store_id}/file_batches/${batchID}/cancel`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Create a vector store batch and poll until all files have been processed.\n     */\n    async createAndPoll(vectorStoreId, body, options) {\n        const batch = await this.create(vectorStoreId, body);\n        return await this.poll(vectorStoreId, batch.id, options);\n    }\n    /**\n     * Returns a list of vector store files in a batch.\n     */\n    listFiles(batchID, params, options) {\n        const { vector_store_id, ...query } = params;\n        return this._client.getAPIList(path `/vector_stores/${vector_store_id}/file_batches/${batchID}/files`, (CursorPage), { query, ...options, headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]) });\n    }\n    /**\n     * Wait for the given file batch to be processed.\n     *\n     * Note: this will return even if one of the files failed to process, you need to\n     * check batch.file_counts.failed_count to handle this case.\n     */\n    async poll(vectorStoreID, batchID, options) {\n        const headers = buildHeaders([\n            options?.headers,\n            {\n                'X-Stainless-Poll-Helper': 'true',\n                'X-Stainless-Custom-Poll-Interval': options?.pollIntervalMs?.toString() ?? undefined,\n            },\n        ]);\n        while (true) {\n            const { data: batch, response } = await this.retrieve(batchID, { vector_store_id: vectorStoreID }, {\n                ...options,\n                headers,\n            }).withResponse();\n            switch (batch.status) {\n                case 'in_progress':\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    }\n                    else {\n                        const headerInterval = response.headers.get('openai-poll-after-ms');\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await sleep(sleepInterval);\n                    break;\n                case 'failed':\n                case 'cancelled':\n                case 'completed':\n                    return batch;\n            }\n        }\n    }\n    /**\n     * Uploads the given files concurrently and then creates a vector store file batch.\n     *\n     * The concurrency limit is configurable using the `maxConcurrency` parameter.\n     */\n    async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {\n        if (files == null || files.length == 0) {\n            throw new Error(`No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`);\n        }\n        const configuredConcurrency = options?.maxConcurrency ?? 5;\n        // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n        const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n        const client = this._client;\n        const fileIterator = files.values();\n        const allFileIds = [...fileIds];\n        // This code is based on this design. The libraries don't accommodate our environment limits.\n        // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n        async function processFiles(iterator) {\n            for (let item of iterator) {\n                const fileObj = await client.files.create({ file: item, purpose: 'assistants' }, options);\n                allFileIds.push(fileObj.id);\n            }\n        }\n        // Start workers to process results\n        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n        // Wait for all processing to complete.\n        await allSettledWithThrow(workers);\n        return await this.createAndPoll(vectorStoreId, {\n            file_ids: allFileIds,\n        });\n    }\n}\n//# sourceMappingURL=file-batches.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage, Page } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { sleep } from \"../../internal/utils.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n    /**\n     * Create a vector store file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to a\n     * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n     */\n    create(vectorStoreID, body, options) {\n        return this._client.post(path `/vector_stores/${vectorStoreID}/files`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a vector store file.\n     */\n    retrieve(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.get(path `/vector_stores/${vector_store_id}/files/${fileID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Update attributes on a vector store file.\n     */\n    update(fileID, params, options) {\n        const { vector_store_id, ...body } = params;\n        return this._client.post(path `/vector_stores/${vector_store_id}/files/${fileID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of vector store files.\n     */\n    list(vectorStoreID, query = {}, options) {\n        return this._client.getAPIList(path `/vector_stores/${vectorStoreID}/files`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete a vector store file. This will remove the file from the vector store but\n     * the file itself will not be deleted. To delete the file, use the\n     * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n     * endpoint.\n     */\n    delete(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.delete(path `/vector_stores/${vector_store_id}/files/${fileID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Attach a file to the given vector store and wait for it to be processed.\n     */\n    async createAndPoll(vectorStoreId, body, options) {\n        const file = await this.create(vectorStoreId, body, options);\n        return await this.poll(vectorStoreId, file.id, options);\n    }\n    /**\n     * Wait for the vector store file to finish processing.\n     *\n     * Note: this will return even if the file failed to process, you need to check\n     * file.last_error and file.status to handle these cases\n     */\n    async poll(vectorStoreID, fileID, options) {\n        const headers = buildHeaders([\n            options?.headers,\n            {\n                'X-Stainless-Poll-Helper': 'true',\n                'X-Stainless-Custom-Poll-Interval': options?.pollIntervalMs?.toString() ?? undefined,\n            },\n        ]);\n        while (true) {\n            const fileResponse = await this.retrieve(fileID, {\n                vector_store_id: vectorStoreID,\n            }, { ...options, headers }).withResponse();\n            const file = fileResponse.data;\n            switch (file.status) {\n                case 'in_progress':\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    }\n                    else {\n                        const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await sleep(sleepInterval);\n                    break;\n                case 'failed':\n                case 'completed':\n                    return file;\n            }\n        }\n    }\n    /**\n     * Upload a file to the `files` API and then attach it to the given vector store.\n     *\n     * Note the file will be asynchronously processed (you can use the alternative\n     * polling helper method to wait for processing to complete).\n     */\n    async upload(vectorStoreId, file, options) {\n        const fileInfo = await this._client.files.create({ file: file, purpose: 'assistants' }, options);\n        return this.create(vectorStoreId, { file_id: fileInfo.id }, options);\n    }\n    /**\n     * Add a file to a vector store and poll until processing is complete.\n     */\n    async uploadAndPoll(vectorStoreId, file, options) {\n        const fileInfo = await this.upload(vectorStoreId, file, options);\n        return await this.poll(vectorStoreId, fileInfo.id, options);\n    }\n    /**\n     * Retrieve the parsed contents of a vector store file.\n     */\n    content(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.getAPIList(path `/vector_stores/${vector_store_id}/files/${fileID}/content`, (Page), { ...options, headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]) });\n    }\n}\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as FileBatchesAPI from \"./file-batches.mjs\";\nimport { FileBatches, } from \"./file-batches.mjs\";\nimport * as FilesAPI from \"./files.mjs\";\nimport { Files, } from \"./files.mjs\";\nimport { CursorPage, Page } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class VectorStores extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.files = new FilesAPI.Files(this._client);\n        this.fileBatches = new FileBatchesAPI.FileBatches(this._client);\n    }\n    /**\n     * Create a vector store.\n     */\n    create(body, options) {\n        return this._client.post('/vector_stores', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a vector store.\n     */\n    retrieve(vectorStoreID, options) {\n        return this._client.get(path `/vector_stores/${vectorStoreID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a vector store.\n     */\n    update(vectorStoreID, body, options) {\n        return this._client.post(path `/vector_stores/${vectorStoreID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of vector stores.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/vector_stores', (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete a vector store.\n     */\n    delete(vectorStoreID, options) {\n        return this._client.delete(path `/vector_stores/${vectorStoreID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Search a vector store for relevant chunks based on a query and file attributes\n     * filter.\n     */\n    search(vectorStoreID, body, options) {\n        return this._client.getAPIList(path `/vector_stores/${vectorStoreID}/search`, (Page), {\n            body,\n            method: 'post',\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\nVectorStores.Files = Files;\nVectorStores.FileBatches = FileBatches;\n//# sourceMappingURL=vector-stores.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport * from \"./chat/index.mjs\";\nexport * from \"./shared.mjs\";\nexport { Audio } from \"./audio/audio.mjs\";\nexport { Batches, } from \"./batches.mjs\";\nexport { Beta } from \"./beta/beta.mjs\";\nexport { Completions, } from \"./completions.mjs\";\nexport { Containers, } from \"./containers/containers.mjs\";\nexport { Embeddings, } from \"./embeddings.mjs\";\nexport { Evals, } from \"./evals/evals.mjs\";\nexport { Files, } from \"./files.mjs\";\nexport { FineTuning } from \"./fine-tuning/fine-tuning.mjs\";\nexport { Graders } from \"./graders/graders.mjs\";\nexport { Images, } from \"./images.mjs\";\nexport { Models } from \"./models.mjs\";\nexport { Moderations, } from \"./moderations.mjs\";\nexport { Responses } from \"./responses/responses.mjs\";\nexport { Uploads } from \"./uploads/uploads.mjs\";\nexport { VectorStores, } from \"./vector-stores/vector-stores.mjs\";\n//# sourceMappingURL=index.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _a, _OpenAI_encoder;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"./internal/tslib.mjs\";\nimport { uuid4 } from \"./internal/utils/uuid.mjs\";\nimport { validatePositiveInteger, isAbsoluteURL, safeJSON } from \"./internal/utils/values.mjs\";\nimport { sleep } from \"./internal/utils/sleep.mjs\";\nimport { parseLogLevel } from \"./internal/utils/log.mjs\";\nimport { castToError, isAbortError } from \"./internal/errors.mjs\";\nimport { getPlatformHeaders } from \"./internal/detect-platform.mjs\";\nimport * as Shims from \"./internal/shims.mjs\";\nimport * as Opts from \"./internal/request-options.mjs\";\nimport * as qs from \"./internal/qs/index.mjs\";\nimport { VERSION } from \"./version.mjs\";\nimport * as Errors from \"./core/error.mjs\";\nimport * as Pagination from \"./core/pagination.mjs\";\nimport * as Uploads from \"./core/uploads.mjs\";\nimport * as API from \"./resources/index.mjs\";\nimport { APIPromise } from \"./core/api-promise.mjs\";\nimport { isRunningInBrowser } from \"./internal/detect-platform.mjs\";\nimport { buildHeaders } from \"./internal/headers.mjs\";\nimport { Batches, } from \"./resources/batches.mjs\";\nimport { Completions, } from \"./resources/completions.mjs\";\nimport { Embeddings, } from \"./resources/embeddings.mjs\";\nimport { Files, } from \"./resources/files.mjs\";\nimport { Images, } from \"./resources/images.mjs\";\nimport { Models } from \"./resources/models.mjs\";\nimport { Moderations, } from \"./resources/moderations.mjs\";\nimport { readEnv } from \"./internal/utils/env.mjs\";\nimport { formatRequestDetails, loggerFor } from \"./internal/utils/log.mjs\";\nimport { isEmptyObj } from \"./internal/utils/values.mjs\";\nimport { Audio } from \"./resources/audio/audio.mjs\";\nimport { Beta } from \"./resources/beta/beta.mjs\";\nimport { Chat } from \"./resources/chat/chat.mjs\";\nimport { Containers, } from \"./resources/containers/containers.mjs\";\nimport { Evals, } from \"./resources/evals/evals.mjs\";\nimport { FineTuning } from \"./resources/fine-tuning/fine-tuning.mjs\";\nimport { Graders } from \"./resources/graders/graders.mjs\";\nimport { Responses } from \"./resources/responses/responses.mjs\";\nimport { Uploads as UploadsAPIUploads, } from \"./resources/uploads/uploads.mjs\";\nimport { VectorStores, } from \"./resources/vector-stores/vector-stores.mjs\";\n/**\n * API Client for interfacing with the OpenAI API.\n */\nexport class OpenAI {\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */\n    constructor({ baseURL = readEnv('OPENAI_BASE_URL'), apiKey = readEnv('OPENAI_API_KEY'), organization = readEnv('OPENAI_ORG_ID') ?? null, project = readEnv('OPENAI_PROJECT_ID') ?? null, ...opts } = {}) {\n        _OpenAI_encoder.set(this, void 0);\n        this.completions = new API.Completions(this);\n        this.chat = new API.Chat(this);\n        this.embeddings = new API.Embeddings(this);\n        this.files = new API.Files(this);\n        this.images = new API.Images(this);\n        this.audio = new API.Audio(this);\n        this.moderations = new API.Moderations(this);\n        this.models = new API.Models(this);\n        this.fineTuning = new API.FineTuning(this);\n        this.graders = new API.Graders(this);\n        this.vectorStores = new API.VectorStores(this);\n        this.beta = new API.Beta(this);\n        this.batches = new API.Batches(this);\n        this.uploads = new API.Uploads(this);\n        this.responses = new API.Responses(this);\n        this.evals = new API.Evals(this);\n        this.containers = new API.Containers(this);\n        if (apiKey === undefined) {\n            throw new Errors.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            project,\n            ...opts,\n            baseURL: baseURL || `https://api.openai.com/v1`,\n        };\n        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {\n            throw new Errors.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        this.baseURL = options.baseURL;\n        this.timeout = options.timeout ?? _a.DEFAULT_TIMEOUT /* 10 minutes */;\n        this.logger = options.logger ?? console;\n        const defaultLogLevel = 'warn';\n        // Set default logLevel early so that we can log a warning in parseLogLevel.\n        this.logLevel = defaultLogLevel;\n        this.logLevel =\n            parseLogLevel(options.logLevel, 'ClientOptions.logLevel', this) ??\n                parseLogLevel(readEnv('OPENAI_LOG'), \"process.env['OPENAI_LOG']\", this) ??\n                defaultLogLevel;\n        this.fetchOptions = options.fetchOptions;\n        this.maxRetries = options.maxRetries ?? 2;\n        this.fetch = options.fetch ?? Shims.getDefaultFetch();\n        __classPrivateFieldSet(this, _OpenAI_encoder, Opts.FallbackEncoder, \"f\");\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n        this.project = project;\n    }\n    /**\n     * Create a new client instance re-using the same options given to the current client with optional overriding.\n     */\n    withOptions(options) {\n        return new this.constructor({\n            ...this._options,\n            baseURL: this.baseURL,\n            maxRetries: this.maxRetries,\n            timeout: this.timeout,\n            logger: this.logger,\n            logLevel: this.logLevel,\n            fetchOptions: this.fetchOptions,\n            apiKey: this.apiKey,\n            organization: this.organization,\n            project: this.project,\n            ...options,\n        });\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    validateHeaders({ values, nulls }) {\n        return;\n    }\n    authHeaders(opts) {\n        return buildHeaders([{ Authorization: `Bearer ${this.apiKey}` }]);\n    }\n    stringifyQuery(query) {\n        return qs.stringify(query, { arrayFormat: 'brackets' });\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${VERSION}`;\n    }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    makeStatusError(status, error, message, headers) {\n        return Errors.APIError.generate(status, error, message, headers);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ?\n            new URL(path)\n            : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = { ...defaultQuery, ...query };\n        }\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */\n    async prepareOptions(options) { }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */\n    async prepareRequest(request, { url, options }) { }\n    get(path, opts) {\n        return this.methodRequest('get', path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest('post', path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest('patch', path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest('put', path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest('delete', path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts) => {\n            return { method, path, ...opts };\n        }));\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this, this.makeRequest(options, remainingRetries, undefined));\n    }\n    async makeRequest(optionsInput, retriesRemaining, retryOfRequestLogID) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });\n        await this.prepareRequest(req, { url, options });\n        /** Not an API request ID, just for correlating local log entries. */\n        const requestLogID = 'log_' + ((Math.random() * (1 << 24)) | 0).toString(16).padStart(6, '0');\n        const retryLogStr = retryOfRequestLogID === undefined ? '' : `, retryOf: ${retryOfRequestLogID}`;\n        const startTime = Date.now();\n        loggerFor(this).debug(`[${requestLogID}] sending request`, formatRequestDetails({\n            retryOfRequestLogID,\n            method: options.method,\n            url,\n            options,\n            headers: req.headers,\n        }));\n        if (options.signal?.aborted) {\n            throw new Errors.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        const headersTime = Date.now();\n        if (response instanceof Error) {\n            const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n            if (options.signal?.aborted) {\n                throw new Errors.APIUserAbortError();\n            }\n            // detect native connection timeout errors\n            // deno throws \"TypeError: error sending request for url (https://example/): client error (Connect): tcp connect error: Operation timed out (os error 60): Operation timed out (os error 60)\"\n            // undici throws \"TypeError: fetch failed\" with cause \"ConnectTimeoutError: Connect Timeout Error (attempted address: example:443, timeout: 1ms)\"\n            // others do not provide enough information to distinguish timeouts from other connection errors\n            const isTimeout = isAbortError(response) ||\n                /timed? ?out/i.test(String(response) + ('cause' in response ? String(response.cause) : ''));\n            if (retriesRemaining) {\n                loggerFor(this).info(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} - ${retryMessage}`);\n                loggerFor(this).debug(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} (${retryMessage})`, formatRequestDetails({\n                    retryOfRequestLogID,\n                    url,\n                    durationMs: headersTime - startTime,\n                    message: response.message,\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID);\n            }\n            loggerFor(this).info(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} - error; no more retries left`);\n            loggerFor(this).debug(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} (error; no more retries left)`, formatRequestDetails({\n                retryOfRequestLogID,\n                url,\n                durationMs: headersTime - startTime,\n                message: response.message,\n            }));\n            if (isTimeout) {\n                throw new Errors.APIConnectionTimeoutError();\n            }\n            throw new Errors.APIConnectionError({ cause: response });\n        }\n        const specialHeaders = [...response.headers.entries()]\n            .filter(([name]) => name === 'x-request-id')\n            .map(([name, value]) => ', ' + name + ': ' + JSON.stringify(value))\n            .join('');\n        const responseInfo = `[${requestLogID}${retryLogStr}${specialHeaders}] ${req.method} ${url} ${response.ok ? 'succeeded' : 'failed'} with status ${response.status} in ${headersTime - startTime}ms`;\n        if (!response.ok) {\n            const shouldRetry = this.shouldRetry(response);\n            if (retriesRemaining && shouldRetry) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                // We don't need the body of this response.\n                await Shims.CancelReadableStream(response.body);\n                loggerFor(this).info(`${responseInfo} - ${retryMessage}`);\n                loggerFor(this).debug(`[${requestLogID}] response error (${retryMessage})`, formatRequestDetails({\n                    retryOfRequestLogID,\n                    url: response.url,\n                    status: response.status,\n                    headers: response.headers,\n                    durationMs: headersTime - startTime,\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID, response.headers);\n            }\n            const retryMessage = shouldRetry ? `error; no more retries left` : `error; not retryable`;\n            loggerFor(this).info(`${responseInfo} - ${retryMessage}`);\n            const errText = await response.text().catch((err) => castToError(err).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            loggerFor(this).debug(`[${requestLogID}] response error (${retryMessage})`, formatRequestDetails({\n                retryOfRequestLogID,\n                url: response.url,\n                status: response.status,\n                headers: response.headers,\n                message: errMessage,\n                durationMs: Date.now() - startTime,\n            }));\n            const err = this.makeStatusError(response.status, errJSON, errMessage, response.headers);\n            throw err;\n        }\n        loggerFor(this).info(responseInfo);\n        loggerFor(this).debug(`[${requestLogID}] response start`, formatRequestDetails({\n            retryOfRequestLogID,\n            url: response.url,\n            status: response.status,\n            headers: response.headers,\n            durationMs: headersTime - startTime,\n        }));\n        return { response, options, controller, requestLogID, retryOfRequestLogID, startTime };\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null, undefined);\n        return new Pagination.PagePromise(this, request, Page);\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, method, ...options } = init || {};\n        if (signal)\n            signal.addEventListener('abort', () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        const isReadableBody = (globalThis.ReadableStream && options.body instanceof globalThis.ReadableStream) ||\n            (typeof options.body === 'object' && options.body !== null && Symbol.asyncIterator in options.body);\n        const fetchOptions = {\n            signal: controller.signal,\n            ...(isReadableBody ? { duplex: 'half' } : {}),\n            method: 'GET',\n            ...options,\n        };\n        if (method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = method.toUpperCase();\n        }\n        try {\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            return await this.fetch.call(undefined, url, fetchOptions);\n        }\n        finally {\n            clearTimeout(timeout);\n        }\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get('x-should-retry');\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === 'true')\n            return true;\n        if (shouldRetryHeader === 'false')\n            return false;\n        // Retry on request timeouts.\n        if (response.status === 408)\n            return true;\n        // Retry on lock timeouts.\n        if (response.status === 409)\n            return true;\n        // Retry on rate limits.\n        if (response.status === 429)\n            return true;\n        // Retry internal errors.\n        if (response.status >= 500)\n            return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, requestLogID, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.get('retry-after-ms');\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.get('retry-after');\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            }\n            else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1, requestLogID);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = { ...inputOptions };\n        const { method, path, query } = options;\n        const url = this.buildURL(path, query);\n        if ('timeout' in options)\n            validatePositiveInteger('timeout', options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const { bodyHeaders, body } = this.buildBody({ options });\n        const reqHeaders = this.buildHeaders({ options: inputOptions, method, bodyHeaders, retryCount });\n        const req = {\n            method,\n            headers: reqHeaders,\n            ...(options.signal && { signal: options.signal }),\n            ...(globalThis.ReadableStream &&\n                body instanceof globalThis.ReadableStream && { duplex: 'half' }),\n            ...(body && { body }),\n            ...(this.fetchOptions ?? {}),\n            ...(options.fetchOptions ?? {}),\n        };\n        return { req, url, timeout: options.timeout };\n    }\n    buildHeaders({ options, method, bodyHeaders, retryCount, }) {\n        let idempotencyHeaders = {};\n        if (this.idempotencyHeader && method !== 'get') {\n            if (!options.idempotencyKey)\n                options.idempotencyKey = this.defaultIdempotencyKey();\n            idempotencyHeaders[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const headers = buildHeaders([\n            idempotencyHeaders,\n            {\n                Accept: 'application/json',\n                'User-Agent': this.getUserAgent(),\n                'X-Stainless-Retry-Count': String(retryCount),\n                ...(options.timeout ? { 'X-Stainless-Timeout': String(Math.trunc(options.timeout / 1000)) } : {}),\n                ...getPlatformHeaders(),\n                'OpenAI-Organization': this.organization,\n                'OpenAI-Project': this.project,\n            },\n            this.authHeaders(options),\n            this._options.defaultHeaders,\n            bodyHeaders,\n            options.headers,\n        ]);\n        this.validateHeaders(headers);\n        return headers.values;\n    }\n    buildBody({ options: { body, headers: rawHeaders } }) {\n        if (!body) {\n            return { bodyHeaders: undefined, body: undefined };\n        }\n        const headers = buildHeaders([rawHeaders]);\n        if (\n        // Pass raw type verbatim\n        ArrayBuffer.isView(body) ||\n            body instanceof ArrayBuffer ||\n            body instanceof DataView ||\n            (typeof body === 'string' &&\n                // Preserve legacy string encoding behavior for now\n                headers.values.has('content-type')) ||\n            // `Blob` is superset of `File`\n            body instanceof Blob ||\n            // `FormData` -> `multipart/form-data`\n            body instanceof FormData ||\n            // `URLSearchParams` -> `application/x-www-form-urlencoded`\n            body instanceof URLSearchParams ||\n            // Send chunked stream (each chunk has own `length`)\n            (globalThis.ReadableStream && body instanceof globalThis.ReadableStream)) {\n            return { bodyHeaders: undefined, body: body };\n        }\n        else if (typeof body === 'object' &&\n            (Symbol.asyncIterator in body ||\n                (Symbol.iterator in body && 'next' in body && typeof body.next === 'function'))) {\n            return { bodyHeaders: undefined, body: Shims.ReadableStreamFrom(body) };\n        }\n        else {\n            return __classPrivateFieldGet(this, _OpenAI_encoder, \"f\").call(this, { body, headers });\n        }\n    }\n}\n_a = OpenAI, _OpenAI_encoder = new WeakMap();\nOpenAI.OpenAI = _a;\nOpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes\nOpenAI.OpenAIError = Errors.OpenAIError;\nOpenAI.APIError = Errors.APIError;\nOpenAI.APIConnectionError = Errors.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = Errors.APIUserAbortError;\nOpenAI.NotFoundError = Errors.NotFoundError;\nOpenAI.ConflictError = Errors.ConflictError;\nOpenAI.RateLimitError = Errors.RateLimitError;\nOpenAI.BadRequestError = Errors.BadRequestError;\nOpenAI.AuthenticationError = Errors.AuthenticationError;\nOpenAI.InternalServerError = Errors.InternalServerError;\nOpenAI.PermissionDeniedError = Errors.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = Errors.UnprocessableEntityError;\nOpenAI.toFile = Uploads.toFile;\nOpenAI.Completions = Completions;\nOpenAI.Chat = Chat;\nOpenAI.Embeddings = Embeddings;\nOpenAI.Files = Files;\nOpenAI.Images = Images;\nOpenAI.Audio = Audio;\nOpenAI.Moderations = Moderations;\nOpenAI.Models = Models;\nOpenAI.FineTuning = FineTuning;\nOpenAI.Graders = Graders;\nOpenAI.VectorStores = VectorStores;\nOpenAI.Beta = Beta;\nOpenAI.Batches = Batches;\nOpenAI.Uploads = UploadsAPIUploads;\nOpenAI.Responses = Responses;\nOpenAI.Evals = Evals;\nOpenAI.Containers = Containers;\n//# sourceMappingURL=client.mjs.map","import * as Errors from \"./error.mjs\";\nimport { isObj, readEnv } from \"./internal/utils.mjs\";\nimport { OpenAI } from \"./client.mjs\";\nimport { buildHeaders } from \"./internal/headers.mjs\";\n/** API Client for interfacing with the Azure OpenAI API. */\nexport class AzureOpenAI extends OpenAI {\n    /**\n     * API Client for interfacing with the Azure OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\n     * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n     * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\n     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */\n    constructor({ baseURL = readEnv('OPENAI_BASE_URL'), apiKey = readEnv('AZURE_OPENAI_API_KEY'), apiVersion = readEnv('OPENAI_API_VERSION'), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}) {\n        if (!apiVersion) {\n            throw new Errors.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\n        }\n        if (typeof azureADTokenProvider === 'function') {\n            dangerouslyAllowBrowser = true;\n        }\n        if (!azureADTokenProvider && !apiKey) {\n            throw new Errors.OpenAIError('Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.');\n        }\n        if (azureADTokenProvider && apiKey) {\n            throw new Errors.OpenAIError('The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.');\n        }\n        // define a sentinel value to avoid any typing issues\n        apiKey ?? (apiKey = API_KEY_SENTINEL);\n        opts.defaultQuery = { ...opts.defaultQuery, 'api-version': apiVersion };\n        if (!baseURL) {\n            if (!endpoint) {\n                endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\n            }\n            if (!endpoint) {\n                throw new Errors.OpenAIError('Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable');\n            }\n            baseURL = `${endpoint}/openai`;\n        }\n        else {\n            if (endpoint) {\n                throw new Errors.OpenAIError('baseURL and endpoint are mutually exclusive');\n            }\n        }\n        super({\n            apiKey,\n            baseURL,\n            ...opts,\n            ...(dangerouslyAllowBrowser !== undefined ? { dangerouslyAllowBrowser } : {}),\n        });\n        this.apiVersion = '';\n        this._azureADTokenProvider = azureADTokenProvider;\n        this.apiVersion = apiVersion;\n        this.deploymentName = deployment;\n    }\n    buildRequest(options, props = {}) {\n        if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\n            if (!isObj(options.body)) {\n                throw new Error('Expected request body to be an object');\n            }\n            const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];\n            if (model !== undefined && !this.baseURL.includes('/deployments')) {\n                options.path = `/deployments/${model}${options.path}`;\n            }\n        }\n        return super.buildRequest(options, props);\n    }\n    async _getAzureADToken() {\n        if (typeof this._azureADTokenProvider === 'function') {\n            const token = await this._azureADTokenProvider();\n            if (!token || typeof token !== 'string') {\n                throw new Errors.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);\n            }\n            return token;\n        }\n        return undefined;\n    }\n    authHeaders(opts) {\n        return;\n    }\n    async prepareOptions(opts) {\n        opts.headers = buildHeaders([opts.headers]);\n        /**\n         * The user should provide a bearer token provider if they want\n         * to use Azure AD authentication. The user shouldn't set the\n         * Authorization header manually because the header is overwritten\n         * with the Azure AD token if a bearer token provider is provided.\n         */\n        if (opts.headers.values.get('Authorization') || opts.headers.values.get('api-key')) {\n            return super.prepareOptions(opts);\n        }\n        const token = await this._getAzureADToken();\n        if (token) {\n            opts.headers.values.set('Authorization', `Bearer ${token}`);\n        }\n        else if (this.apiKey !== API_KEY_SENTINEL) {\n            opts.headers.values.set('api-key', this.apiKey);\n        }\n        else {\n            throw new Errors.OpenAIError('Unable to handle auth');\n        }\n        return super.prepareOptions(opts);\n    }\n}\nconst _deployments_endpoints = new Set([\n    '/completions',\n    '/chat/completions',\n    '/embeddings',\n    '/audio/transcriptions',\n    '/audio/translations',\n    '/audio/speech',\n    '/images/generations',\n    '/batches',\n    '/images/edits',\n]);\nconst API_KEY_SENTINEL = '<Missing Key>';\n//# sourceMappingURL=azure.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport { OpenAI as default } from \"./client.mjs\";\nexport { toFile } from \"./core/uploads.mjs\";\nexport { APIPromise } from \"./core/api-promise.mjs\";\nexport { OpenAI } from \"./client.mjs\";\nexport { PagePromise } from \"./core/pagination.mjs\";\nexport { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError, } from \"./core/error.mjs\";\nexport { AzureOpenAI } from \"./azure.mjs\";\n//# sourceMappingURL=index.mjs.map"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96]}