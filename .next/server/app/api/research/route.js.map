{"version":3,"file":"app/api/research/route.js","mappings":"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","sources":["webpack://_N_E/./server/promptTemplates.ts","webpack://_N_E/./app/api/research/route.ts","webpack://_N_E/./app/api/research/route.ts?f598","webpack://_N_E/?d00e","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/external commonjs \"node:async_hooks\""],"sourcesContent":["export const researchPrompt = ({ role, tasks, resume }: any) => `\nYou are an AI researcher conducting a comprehensive analysis of AI automation risk for the role: ${role}.\n\n**ROLE CONTEXT:**\n- Position: ${role}\n- Weekly task breakdown: ${JSON.stringify(tasks)}\n- Professional background: ${resume?.slice(0, 800)}\n\n**RESEARCH REQUIREMENTS:**\nFor each major task category, provide:\n1. **Risk Assessment**: High (actively being automated) | Moderate (tools emerging) | Low (human-centric)\n2. **Evidence**: Specific AI tools, companies, or research directly relevant to this task\n3. **Timeline**: When automation might significantly impact this task\n4. **Source URLs**: Verifiable links to recent developments (2023-2024 preferred)\n\n**OUTPUT FORMAT:**\nReturn ONLY valid JSON in this exact structure:\n{\n  \"taskFacts\": [\n    {\n      \"task\": \"specific task name\",\n      \"riskLevel\": \"High|Moderate|Low\", \n      \"evidence\": \"detailed description of AI tools/developments affecting this task\",\n      \"impact\": \"percentage or description of potential automation\",\n      \"timeline\": \"estimated timeframe for significant impact\",\n      \"sourceUrl\": \"verifiable URL\",\n      \"toolsExample\": \"specific AI tools/platforms mentioned\"\n    }\n  ],\n  \"macroStats\": [\n    {\n      \"statistic\": \"industry-wide AI adoption or job impact data\",\n      \"source\": \"research organization or credible publication\",\n      \"url\": \"source URL\",\n      \"year\": \"2023 or 2024\",\n      \"relevance\": \"how this relates to the specific role\"\n    }\n  ],\n  \"industryContext\": {\n    \"overview\": \"2-3 sentence summary of AI impact in this industry\",\n    \"keyTrends\": [\"trend1\", \"trend2\", \"trend3\"],\n    \"timeHorizon\": \"overall timeline for major disruption in this field\"\n  }\n}\n\nFocus on concrete, recent developments with credible sources. Avoid speculation.`;\n\nexport const analysisPrompt = (json: string) => `\nYou are an expert AI risk analyst generating a comprehensive career assessment report.\n\n**INPUT DATA:** ${json}\n\n**SCORING FORMULA:**\nCalculate risk score: S = Σ(task_hours × risk_weight) / total_hours × 100\n- High Risk = 1.0 weight\n- Moderate Risk = 0.6 weight  \n- Low Risk = 0.3 weight\n\n**OUTPUT REQUIREMENTS:**\nGenerate exactly two sections separated by \"---FULL_REPORT---\":\n\n**SECTION 1: PREVIEW (Maximum 200 words)**\nCreate a polished, professional preview with:\n- Opening statement about AI transformation in this field\n- 2-3 key findings from the analysis\n- Overall risk score calculation and interpretation\n- One actionable tip\n- Inline citations using [1], [2], etc.\n\n**SECTION 2: FULL REPORT (Comprehensive Markdown)**\nGenerate a detailed markdown report with these sections:\n\n## Executive Summary\nBrief overview of findings and risk level\n\n## Risk Score Breakdown\n**Overall Risk Score: [X]/100 ([Risk Level])**\n\n### Task-by-Task Analysis\nFor each task:\n- **Task Name** - Risk Level: High/Moderate/Low\n- Current AI capabilities and tools\n- Timeline for impact\n- Evidence and citations [1]\n\n## Timeline & Projections\n**Immediate (0-12 months):**\n- Specific developments expected\n\n**Medium-term (1-3 years):**\n- Major changes anticipated\n\n**Long-term (3-5 years):**\n- Potential transformation\n\n## Mitigation Strategies\n### High-Priority Actions\n1. **Skill Development**: Specific skills to learn\n2. **Career Positioning**: How to differentiate\n3. **Industry Adaptation**: Trends to monitor\n\n### Recommended Focus Areas\n- List of specific competencies to develop\n- Technologies to learn\n- Certifications to pursue\n\n## Market Intelligence\n- Industry adoption rates\n- Competitor analysis  \n- Investment trends in automation\n\n## Action Plan\n### Next 90 Days\n- Immediate steps to take\n\n### Next 6 Months  \n- Medium-term goals\n\n### Next 1-2 Years\n- Long-term positioning strategy\n\n## Sources & References\n[1] Source 1 description - URL\n[2] Source 2 description - URL\n[etc.]\n\n**FORMATTING GUIDELINES:**\n- Use proper markdown headers (##, ###)\n- Include bullet points and numbered lists\n- Bold important terms and metrics\n- Use inline citations [1], [2] throughout\n- Keep language professional but accessible\n- Include specific, actionable recommendations\n- If insufficient data: respond with \"INSUFFICIENT_DATA_FOR_ANALYSIS\"\n\nGenerate the complete analysis now:`;\n\nexport const linkedinPrompt = (profileData: string) => `\nYou are analyzing a LinkedIn profile to extract professional information for AI replacement risk assessment.\n\n**LINKEDIN PROFILE DATA:**\n${profileData}\n\n**EXTRACTION REQUIREMENTS:**\nExtract and structure the following information:\n\n{\n  \"personalInfo\": {\n    \"name\": \"full name\",\n    \"currentTitle\": \"current job title\",\n    \"company\": \"current company\",\n    \"location\": \"current location\"\n  },\n  \"experience\": {\n    \"yearsTotal\": \"total years of experience\",\n    \"currentRole\": {\n      \"title\": \"current position\",\n      \"company\": \"company name\", \n      \"duration\": \"time in current role\",\n      \"description\": \"role description and responsibilities\"\n    },\n    \"previousRoles\": [\n      {\n        \"title\": \"job title\",\n        \"company\": \"company name\",\n        \"duration\": \"time period\",\n        \"keyResponsibilities\": [\"responsibility1\", \"responsibility2\"]\n      }\n    ]\n  },\n  \"skills\": {\n    \"technical\": [\"technical skill 1\", \"technical skill 2\"],\n    \"soft\": [\"soft skill 1\", \"soft skill 2\"],\n    \"tools\": [\"tool 1\", \"tool 2\"],\n    \"certifications\": [\"cert 1\", \"cert 2\"]\n  },\n  \"education\": [\n    {\n      \"degree\": \"degree type\",\n      \"field\": \"field of study\", \n      \"institution\": \"school name\",\n      \"year\": \"graduation year\"\n    }\n  ],\n  \"dailyTasks\": \"inferred daily responsibilities based on current and recent roles\",\n  \"careerCategory\": \"best matching category: designer|product-manager|marketing|accounting|legal|other\",\n  \"companySize\": \"inferred company size: startup|small|medium|large\"\n}\n\nFocus on extracting concrete, specific information. If data is missing, mark as \"not_available\".`;\n\nexport const webBrowsePrompt = (linkedinUrl: string) => `\nBrowse this LinkedIn profile URL and extract comprehensive professional information: ${linkedinUrl}\n\nFocus on:\n1. Current job title and company\n2. Work experience and career progression  \n3. Skills and technical competencies\n4. Education and certifications\n5. Key responsibilities and achievements\n6. Industry and functional area\n\nReturn the extracted information in a structured format that can be used for AI replacement risk analysis.`; ","import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport OpenAI from 'openai';\nimport { researchPrompt, linkedinPrompt } from '@/server/promptTemplates';\n\nexport const runtime = 'edge';\n\n// Function to sanitize text for database insertion\nfunction sanitizeText(text: string): string {\n  if (!text) return '';\n  \n  return text\n    // Remove null bytes and other problematic Unicode characters\n    .replace(/\\0/g, '')\n    // Normalize Unicode\n    .normalize('NFC')\n    // Remove or replace problematic escape sequences\n    .replace(/\\\\u[0-9a-fA-F]{4}/g, (match) => {\n      try {\n        return JSON.parse(`\"${match}\"`);\n      } catch {\n        return '';\n      }\n    })\n    // Limit length to prevent oversized content\n    .substring(0, 50000);\n}\n\n// Function to analyze LinkedIn profile using web browsing\nasync function analyzeLinkedInProfile(openai: OpenAI, linkedinUrl: string): Promise<any> {\n  console.log('🔗 [Research API] Analyzing LinkedIn profile:', linkedinUrl);\n  \n  try {\n    // Use GPT-4 with web browsing to analyze LinkedIn profile\n    const linkedinAnalysis = await openai.chat.completions.create({\n      model: 'gpt-4o',\n      temperature: 0.1,\n      messages: [\n        {\n          role: 'system',\n          content: `You are a professional profile analyzer. I will give you a LinkedIn URL and you need to extract professional information from it. \n\nExtract the following information:\n- Current job title and company\n- Years of experience (estimate from career progression)\n- Key skills and technologies\n- Daily responsibilities (infer from job titles and descriptions)\n- Industry and functional area\n- Education background\n- Career progression pattern\n\nReturn the information in a structured JSON format like this:\n{\n  \"currentTitle\": \"job title\",\n  \"company\": \"company name\",\n  \"yearsExperience\": \"estimated years\",\n  \"skills\": [\"skill1\", \"skill2\"],\n  \"dailyTasks\": \"inferred daily responsibilities\",\n  \"industry\": \"industry sector\",\n  \"education\": \"education background\",\n  \"careerProgression\": \"career trajectory analysis\"\n}\n\nIf you cannot access the profile or extract information, return {\"error\": \"Unable to analyze profile\", \"reason\": \"explanation\"}.`\n        },\n        {\n          role: 'user',\n          content: `Please analyze this LinkedIn profile and extract professional information: ${linkedinUrl}`\n        }\n      ]\n    });\n\n    const responseContent = linkedinAnalysis.choices[0].message.content;\n    if (!responseContent) {\n      throw new Error('Empty response from LinkedIn analysis');\n    }\n\n    try {\n      const profileData = JSON.parse(responseContent);\n      console.log('✅ [Research API] LinkedIn profile analyzed successfully');\n      return profileData;\n    } catch (parseError) {\n      console.error('❌ [Research API] Failed to parse LinkedIn analysis:', parseError);\n      console.log('📄 [Research API] Raw response:', responseContent);\n      \n      // Return the raw text if JSON parsing fails\n      return {\n        error: false,\n        rawAnalysis: responseContent,\n        extractedInfo: \"LinkedIn profile analysis completed but in text format\"\n      };\n    }\n  } catch (error) {\n    console.error('❌ [Research API] LinkedIn analysis failed:', error);\n    return {\n      error: true,\n      reason: error instanceof Error ? error.message : 'Unknown error during LinkedIn analysis'\n    };\n  }\n}\n\n// Function to trigger analysis directly (instead of fire-and-forget)\nasync function triggerAnalysis(profileId: string, evidence: any) {\n  console.log('🔥 [Research API] Starting direct analysis trigger...');\n  \n  try {\n    const analysisUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/api/analyze`;\n    console.log('🎯 [Research API] Analysis URL:', analysisUrl);\n    \n    const response = await fetch(analysisUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ profile_id: profileId, evidence })\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('❌ [Research API] Analysis failed:', response.status, errorText);\n      throw new Error(`Analysis failed: ${response.status} ${errorText}`);\n    }\n\n    const result = await response.json();\n    console.log('✅ [Research API] Analysis triggered successfully:', result);\n    return result;\n  } catch (error) {\n    console.error('💥 [Research API] Analysis trigger error:', error);\n    throw error;\n  }\n}\n\nexport async function POST(req: NextRequest) {\n  console.log('🔍 [Research API] Starting request...');\n  \n  try {\n    const body = await req.json();\n    console.log('📋 [Research API] Request body:', JSON.stringify(body, null, 2));\n    \n    const { role, tasks, resume, linkedinUrl, profileData } = body;\n\n    // Validate required fields\n    if (!role) {\n      console.error('❌ [Research API] Missing role field');\n      return NextResponse.json({ error: 'Role is required' }, { status: 400 });\n    }\n\n    // Sanitize text inputs\n    const sanitizedRole = sanitizeText(role);\n    let sanitizedResume = sanitizeText(resume || '');\n    \n    console.log('🧹 [Research API] Text sanitization complete');\n    console.log('📏 [Research API] Sanitized resume length:', sanitizedResume.length);\n    console.log('🔗 [Research API] LinkedIn URL provided:', !!linkedinUrl);\n\n    console.log('🔗 [Research API] Creating Supabase client...');\n    const supabase = createClient(\n      process.env.SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n    console.log('✅ [Research API] Supabase client created');\n\n    console.log('🤖 [Research API] Creating OpenAI client...');\n    const openai = new OpenAI({ \n      apiKey: process.env.OPENAI_API_KEY,\n      timeout: 30000 // 30 second timeout\n    });\n\n    // LinkedIn Profile Analysis\n    let linkedinData = null;\n    if (linkedinUrl && linkedinUrl.trim()) {\n      console.log('🔗 [Research API] Processing LinkedIn profile...');\n      linkedinData = await analyzeLinkedInProfile(openai, linkedinUrl.trim());\n      \n      if (linkedinData && !linkedinData.error) {\n        console.log('✅ [Research API] LinkedIn data extracted successfully');\n        \n        // Enhance resume content with LinkedIn data\n        if (linkedinData.dailyTasks) {\n          sanitizedResume += `\\n\\nLinkedIn Profile Insights:\\n${linkedinData.dailyTasks}`;\n        }\n        if (linkedinData.skills && Array.isArray(linkedinData.skills)) {\n          sanitizedResume += `\\n\\nKey Skills: ${linkedinData.skills.join(', ')}`;\n        }\n        if (linkedinData.careerProgression) {\n          sanitizedResume += `\\n\\nCareer Progression: ${linkedinData.careerProgression}`;\n        }\n        \n        console.log('📏 [Research API] Enhanced resume length after LinkedIn:', sanitizedResume.length);\n      } else {\n        console.log('⚠️ [Research API] LinkedIn analysis failed, continuing without LinkedIn data');\n      }\n    }\n\n    console.log('💾 [Research API] Inserting profile into database...');\n    const { data: profile, error: dbError } = await supabase\n      .from('profiles')\n      .insert([{ \n        role: sanitizedRole, \n        resume: sanitizedResume, \n        task_hours: tasks || {},\n        email: null // We're not collecting email in the current flow\n      }])\n      .select()\n      .single();\n\n    if (dbError) {\n      console.error('❌ [Research API] Database error:', dbError);\n      return NextResponse.json({ error: 'Database error: ' + dbError.message }, { status: 500 });\n    }\n\n    console.log('✅ [Research API] Profile created:', profile);\n\n    console.log('📝 [Research API] Generating research prompt...');\n    const prompt = researchPrompt({ \n      role: sanitizedRole, \n      tasks, \n      resume: sanitizedResume,\n      linkedinData: linkedinData || null,\n      profileData: profileData || null\n    });\n    console.log('📄 [Research API] Prompt length:', prompt.length);\n\n    console.log('🚀 [Research API] Calling OpenAI API...');\n    const research = await openai.chat.completions.create({\n      model: 'gpt-4o',\n      temperature: 0.2,\n      messages: [{ role: 'system', content: prompt }]\n    });\n\n    console.log('✅ [Research API] OpenAI response received');\n    console.log('📊 [Research API] Response usage:', research.usage);\n\n    const responseContent = research.choices[0].message.content;\n    console.log('📄 [Research API] Response content:', responseContent?.substring(0, 500) + '...');\n\n    if (!responseContent) {\n      console.error('❌ [Research API] Empty response from OpenAI');\n      return NextResponse.json({ error: 'Empty response from AI' }, { status: 500 });\n    }\n\n    console.log('🔧 [Research API] Parsing JSON response...');\n    let evidence;\n    try {\n      evidence = JSON.parse(responseContent);\n      console.log('✅ [Research API] JSON parsed successfully');\n      \n      // Add LinkedIn data to evidence if available\n      if (linkedinData && !linkedinData.error) {\n        evidence.linkedinProfile = linkedinData;\n      }\n    } catch (parseError) {\n      console.error('❌ [Research API] JSON parse error:', parseError);\n      console.log('📄 [Research API] Raw content that failed to parse:', responseContent);\n      return NextResponse.json({ error: 'Invalid AI response format' }, { status: 500 });\n    }\n\n    console.log('🔥 [Research API] Triggering analysis...');\n    // Call analysis directly instead of fire-and-forget\n    try {\n      await triggerAnalysis(profile.id, evidence);\n      console.log('✅ [Research API] Analysis completed successfully');\n    } catch (analysisError) {\n      console.error('❌ [Research API] Analysis failed, but profile created:', analysisError);\n      // Don't fail the entire request if analysis fails - let user know to try again\n    }\n\n    console.log('✅ [Research API] Request completed successfully');\n    return NextResponse.json({ status: 'processing', profile_id: profile.id });\n\n  } catch (error) {\n    console.error('💥 [Research API] Unexpected error:', error);\n    console.error('📚 [Research API] Error stack:', error instanceof Error ? error.stack : 'No stack trace');\n    return NextResponse.json(\n      { error: 'Internal server error: ' + (error instanceof Error ? error.message : String(error)) }, \n      { status: 500 }\n    );\n  }\n} ","import { AppRouteRouteModule } from \"next/dist/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/miguel/Downloads/AICareerShield/app/api/research/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/research/route\",\n        pathname: \"/api/research\",\n        filename: \"route\",\n        bundlePath: \"app/api/research/route\"\n    },\n    resolvedPagePath: \"/Users/miguel/Downloads/AICareerShield/app/api/research/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","var _self___RSC_MANIFEST;\nimport { createServerModuleMap } from \"next/dist/server/app-render/action-utils\";\nimport { setReferenceManifestsSingleton } from \"next/dist/server/app-render/encryption-utils\";\nimport { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fresearch%2Froute&page=%2Fapi%2Fresearch%2Froute&pagePath=private-next-app-dir%2Fapi%2Fresearch%2Froute.ts&appDir=%2FUsers%2Fmiguel%2FDownloads%2FAICareerShield%2Fapp&appPaths=%2Fapi%2Fresearch%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/research/route.ts?__next_edge_ssr_entry__\";\nconst nextConfig = {\"env\":{},\"webpack\":null,\"eslint\":{\"ignoreDuringBuilds\":false},\"typescript\":{\"ignoreBuildErrors\":false,\"tsconfigPath\":\"tsconfig.json\"},\"distDir\":\".next\",\"cleanDistDir\":true,\"assetPrefix\":\"\",\"cacheMaxMemorySize\":52428800,\"configOrigin\":\"next.config.js\",\"useFileSystemPublicRoutes\":true,\"generateEtags\":true,\"pageExtensions\":[\"tsx\",\"ts\",\"jsx\",\"js\"],\"poweredByHeader\":true,\"compress\":true,\"images\":{\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"loaderFile\":\"\",\"domains\":[],\"disableStaticImages\":false,\"minimumCacheTTL\":60,\"formats\":[\"image/webp\"],\"dangerouslyAllowSVG\":false,\"contentSecurityPolicy\":\"script-src 'none'; frame-src 'none'; sandbox;\",\"contentDispositionType\":\"attachment\",\"remotePatterns\":[],\"unoptimized\":false},\"devIndicators\":{\"position\":\"bottom-left\"},\"onDemandEntries\":{\"maxInactiveAge\":60000,\"pagesBufferLength\":5},\"amp\":{\"canonicalBase\":\"\"},\"basePath\":\"\",\"sassOptions\":{},\"trailingSlash\":false,\"i18n\":null,\"productionBrowserSourceMaps\":false,\"excludeDefaultMomentLocales\":true,\"serverRuntimeConfig\":{},\"publicRuntimeConfig\":{},\"reactProductionProfiling\":false,\"reactStrictMode\":null,\"reactMaxHeadersLength\":6000,\"httpAgentOptions\":{\"keepAlive\":true},\"logging\":{},\"expireTime\":31536000,\"staticPageGenerationTimeout\":60,\"modularizeImports\":{\"@mui/icons-material\":{\"transform\":\"@mui/icons-material/{{member}}\"},\"lodash\":{\"transform\":\"lodash/{{member}}\"}},\"outputFileTracingRoot\":\"/Users/miguel/Downloads/AICareerShield\",\"experimental\":{\"nodeMiddleware\":false,\"cacheLife\":{\"default\":{\"stale\":300,\"revalidate\":900,\"expire\":4294967294},\"seconds\":{\"stale\":0,\"revalidate\":1,\"expire\":60},\"minutes\":{\"stale\":300,\"revalidate\":60,\"expire\":3600},\"hours\":{\"stale\":300,\"revalidate\":3600,\"expire\":86400},\"days\":{\"stale\":300,\"revalidate\":86400,\"expire\":604800},\"weeks\":{\"stale\":300,\"revalidate\":604800,\"expire\":2592000},\"max\":{\"stale\":300,\"revalidate\":2592000,\"expire\":4294967294}},\"cacheHandlers\":{},\"cssChunking\":true,\"multiZoneDraftMode\":false,\"appNavFailHandling\":false,\"prerenderEarlyExit\":true,\"serverMinification\":true,\"serverSourceMaps\":false,\"linkNoTouchStart\":false,\"caseSensitiveRoutes\":false,\"clientSegmentCache\":false,\"dynamicOnHover\":false,\"preloadEntriesOnStart\":true,\"clientRouterFilter\":true,\"clientRouterFilterRedirects\":false,\"fetchCacheKeyPrefix\":\"\",\"middlewarePrefetch\":\"flexible\",\"optimisticClientCache\":true,\"manualClientBasePath\":false,\"cpus\":13,\"memoryBasedWorkersCount\":false,\"imgOptConcurrency\":null,\"imgOptTimeoutInSeconds\":7,\"imgOptMaxInputPixels\":268402689,\"imgOptSequentialRead\":null,\"isrFlushToDisk\":true,\"workerThreads\":false,\"optimizeCss\":false,\"nextScriptWorkers\":false,\"scrollRestoration\":false,\"externalDir\":false,\"disableOptimizedLoading\":false,\"gzipSize\":true,\"craCompat\":false,\"esmExternals\":true,\"fullySpecified\":false,\"swcTraceProfiling\":false,\"forceSwcTransforms\":false,\"largePageDataBytes\":128000,\"typedRoutes\":false,\"typedEnv\":false,\"parallelServerCompiles\":false,\"parallelServerBuildTraces\":false,\"ppr\":false,\"authInterrupts\":false,\"webpackMemoryOptimizations\":false,\"optimizeServerReact\":true,\"useEarlyImport\":false,\"viewTransition\":false,\"routerBFCache\":false,\"staleTimes\":{\"dynamic\":0,\"static\":300},\"serverComponentsHmrCache\":true,\"staticGenerationMaxConcurrency\":8,\"staticGenerationMinPagesPerWorker\":25,\"dynamicIO\":false,\"inlineCss\":false,\"useCache\":false,\"optimizePackageImports\":[\"lucide-react\",\"date-fns\",\"lodash-es\",\"ramda\",\"antd\",\"react-bootstrap\",\"ahooks\",\"@ant-design/icons\",\"@headlessui/react\",\"@headlessui-float/react\",\"@heroicons/react/20/solid\",\"@heroicons/react/24/solid\",\"@heroicons/react/24/outline\",\"@visx/visx\",\"@tremor/react\",\"rxjs\",\"@mui/material\",\"@mui/icons-material\",\"recharts\",\"react-use\",\"effect\",\"@effect/schema\",\"@effect/platform\",\"@effect/platform-node\",\"@effect/platform-browser\",\"@effect/platform-bun\",\"@effect/sql\",\"@effect/sql-mssql\",\"@effect/sql-mysql2\",\"@effect/sql-pg\",\"@effect/sql-squlite-node\",\"@effect/sql-squlite-bun\",\"@effect/sql-squlite-wasm\",\"@effect/sql-squlite-react-native\",\"@effect/rpc\",\"@effect/rpc-http\",\"@effect/typeclass\",\"@effect/experimental\",\"@effect/opentelemetry\",\"@material-ui/core\",\"@material-ui/icons\",\"@tabler/icons-react\",\"mui-core\",\"react-icons/ai\",\"react-icons/bi\",\"react-icons/bs\",\"react-icons/cg\",\"react-icons/ci\",\"react-icons/di\",\"react-icons/fa\",\"react-icons/fa6\",\"react-icons/fc\",\"react-icons/fi\",\"react-icons/gi\",\"react-icons/go\",\"react-icons/gr\",\"react-icons/hi\",\"react-icons/hi2\",\"react-icons/im\",\"react-icons/io\",\"react-icons/io5\",\"react-icons/lia\",\"react-icons/lib\",\"react-icons/lu\",\"react-icons/md\",\"react-icons/pi\",\"react-icons/ri\",\"react-icons/rx\",\"react-icons/si\",\"react-icons/sl\",\"react-icons/tb\",\"react-icons/tfi\",\"react-icons/ti\",\"react-icons/vsc\",\"react-icons/wi\"]},\"htmlLimitedBots\":\"Mediapartners-Google|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti\",\"bundlePagesRouterDependencies\":false,\"configFile\":\"/Users/miguel/Downloads/AICareerShield/next.config.js\",\"configFileName\":\"next.config.js\",\"serverExternalPackages\":[\"pdf-parse\"],\"turbopack\":{\"root\":\"/Users/miguel/Downloads/AICareerShield\"}}\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst rscManifest = (_self___RSC_MANIFEST = self.__RSC_MANIFEST) == null ? void 0 : _self___RSC_MANIFEST[\"/api/research/route\"];\nconst rscServerManifest = maybeJSONParse(self.__RSC_SERVER_MANIFEST);\nif (rscManifest && rscServerManifest) {\n    setReferenceManifestsSingleton({\n        page: \"/api/research/route\",\n        clientReferenceManifest: rscManifest,\n        serverActionsManifest: rscServerManifest,\n        serverModuleMap: createServerModuleMap({\n            serverActionsManifest: rscServerManifest\n        })\n    });\n}\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule, {\n    nextConfig\n});\n\n//# sourceMappingURL=edge-app-route.js.map","module.exports = require(\"node:buffer\");","module.exports = require(\"node:async_hooks\");"],"names":["researchPrompt","role","tasks","resume","JSON","stringify","slice","json","runtime","sanitizeText","text","replace","normalize","parse","match","substring","analyzeLinkedInProfile","openai","linkedinUrl","console","log","responseContent","linkedinAnalysis","chat","completions","create","model","temperature","messages","content","choices","message","profileData","parseError","error","rawAnalysis","extractedInfo","reason","Error","triggerAnalysis","profileId","evidence","analysisUrl","process","env","NEXT_PUBLIC_SITE_URL","response","fetch","method","headers","body","profile_id","ok","errorText","status","result","POST","req","NextResponse","sanitizedRole","sanitizedResume","length","supabase","createClient","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","OpenAI","apiKey","OPENAI_API_KEY","timeout","trim","linkedinData","dailyTasks","skills","Array","isArray","join","careerProgression","data","profile","dbError","from","insert","task_hours","email","select","single","prompt","research","usage","linkedinProfile","id","analysisError","stack","String"],"sourceRoot":"","ignoreList":[]}